<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>圣遗物强化手册</title>
      <link href="/posts/bbdaf7f9.html"/>
      <url>/posts/bbdaf7f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="圣遗物强化手册"><a href="#圣遗物强化手册" class="headerlink" title="圣遗物强化手册"></a>圣遗物强化手册</h1><ul><li><p>加点大小</p><ul><li>大小一览<img src="https://upload-bbs.miyoushe.com/upload/2020/12/04/159074312/03e419bb794c3cbdd7bacc52977e9ee4_7241772888604808935.png?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,png"></li></ul></li><li><p>出货机制</p><ul><li>沙<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/c93dcde76a7f8389af75c44c78515b3a_2030512845831514905.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>杯<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/07c449d80c075722d87217f86c45c48e_8799814442841888351.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>头<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/4a603e7b4cb328b0e7ff7c2c996d07cf_7760788579509625083.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li></ul></li><li><p>副词条出货机制</p><ul><li>花<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/f804ea469144a5aac037cf60e015ea37_69156827838924319.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>毛<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/e1a03e27e9696fc9889989ad38d4e294_9060055977795619307.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>沙<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/7cccf1410c1298a4aec6c3cadd39e6df_1349958866260146534.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>杯<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/58a4f79d040b20e729f07950b790427f_8231672692626659048.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li><li>头<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/97d1d5702a674df353feb7bc748e17cc_9099874272589358449.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li></ul></li><li><p>词条数量</p><ul><li>概率<img src="https://upload-bbs.miyoushe.com/upload/2023/01/30/193042743/1e42433212decccc789d095f4b9d673d_3207978508441405198.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li></ul></li><li><p>掉落数量</p><ul><li>概率<img src="https://upload-bbs.miyoushe.com/upload/2023/01/31/193042743/ce53d750c5e23b6822c7a3c33800b1cb_270190641195477866.jpg?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,jpg"></li></ul></li><li><p>出货率</p><ul><li>概率<img src="https://upload-bbs.miyoushe.com/upload/2022/04/11/302627728/82753b4b09a8aacebbbb70349f3e3cc3_4697848498236111450.png?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫02</title>
      <link href="/posts/234071d3.html"/>
      <url>/posts/234071d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h2><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = json.load(<span class="built_in">open</span>(<span class="string">&#x27;filename&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">ret=jsonpath.jsonpath(obj,<span class="string">&#x27;json语法&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h2><ul><li><p>基本简介</p><ul><li>简称：bs4</li><li>和xml一样是一个html解析器</li><li>优缺点<ul><li>优点：接口人性化</li><li>缺点：效率较低</li></ul></li></ul></li><li><p>安装和创建</p><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure></li><li><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器响应的文件生成对象</span></span><br><span class="line">soup = BeautifulSoup(response.read().decode(),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#本地文件生成对象</span></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;1.html&#x27;</span>),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#注意：文件打开默认编码格式是gbk</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>节点定位</p><ul><li><p>根据标签名查找节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup.a<span class="comment">#只能找到第一个a</span></span><br><span class="line">soup.a.name</span><br><span class="line">soup.a.attrs<span class="comment">#获取标签的属性和属性值</span></span><br></pre></td></tr></table></figure></li><li><p>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="string">&#x27;a&#x27;</span>,title=<span class="string">&#x27;a2&#x27;</span>,class_=<span class="string">&#x27;a3&#x27;</span>)<span class="comment">#根据条件找到标签对象,class的匹配要加下划线</span></span><br><span class="line">find_all([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;span&#x27;</span>],limit)<span class="comment">#查找多个标签，参数要传入的是列表,limit限制结果数量</span></span><br><span class="line">select()</span><br><span class="line">element</span><br><span class="line">    .<span class="keyword">class</span></span><br><span class="line">    <span class="comment">#id</span></span><br><span class="line">    <span class="comment">#属性选择器</span></span><br><span class="line">    [attribute]</span><br><span class="line">        [attribute=<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    <span class="comment">#层级选择器</span></span><br><span class="line">    <span class="comment">#后代选择器</span></span><br><span class="line">    element element</span><br><span class="line">        <span class="comment">#子代选择器</span></span><br><span class="line">        element &gt; element</span><br><span class="line">        <span class="comment">#多个标签</span></span><br><span class="line">        div , a</span><br></pre></td></tr></table></figure></li><li><p>节点信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取节点内容</span></span><br><span class="line">    obj.string</span><br><span class="line">obj.get_text()<span class="comment">#推荐，如果标签内容只有文字，两者都可，如果还有标签，前者不行</span></span><br><span class="line"><span class="comment">#获取节点的属性</span></span><br><span class="line">tag.name</span><br><span class="line">    tag.attrs<span class="comment">#属性值将作为一个字典返回</span></span><br><span class="line"><span class="comment">#获取节点属性</span></span><br><span class="line">    obj.attrs.get(<span class="string">&#x27;title&#x27;</span>)<span class="comment">#推荐</span></span><br><span class="line">    obj.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    boj[<span class="string">&#x27;title&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Seleninum"><a href="#Seleninum" class="headerlink" title="Seleninum"></a>Seleninum</h1><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><ul><li><p>什么是Selenium</p><ul><li>wed应用程序测试工具</li><li>直接运行在浏览器上</li><li>支持各种浏览器驱动</li><li>支持误解main浏览器操作</li></ul></li><li><p>为什么使用Selenium</p><ul><li>模拟浏览器功能，自动执行网页中的js代码，实现动态加载</li></ul></li><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载相关驱动</span></span><br><span class="line"><span class="comment">#安装selenium库</span></span><br><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></li><li><p>使用步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#创建操作对象</span></span><br><span class="line">path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment">#访问</span></span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure></li><li><p>元素定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_id<span class="comment">#通过id</span></span><br><span class="line">find_element_by_name<span class="comment">#通过属性值</span></span><br><span class="line">find_element_by_xpath<span class="comment">#通过xpth</span></span><br><span class="line">find_element_by_tag_name<span class="comment">#通过标签名</span></span><br><span class="line">find_element_by_css_selector<span class="comment">#通过bs4</span></span><br><span class="line">find_element_by_link_text<span class="comment">#通过链接文字</span></span><br></pre></td></tr></table></figure></li><li><p>访问元素信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.get_attribute(<span class="string">&#x27;class&#x27;</span>)<span class="comment">#获取元素属性</span></span><br><span class="line">.text()<span class="comment">#元素文本</span></span><br><span class="line">.tag_name<span class="comment">#标签名</span></span><br></pre></td></tr></table></figure></li><li><p>交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">click()<span class="comment">#点击</span></span><br><span class="line">send_keys()<span class="comment">#输入</span></span><br><span class="line">browser.back()<span class="comment">#后退</span></span><br><span class="line">browser.forward()<span class="comment">#向前</span></span><br><span class="line"><span class="comment">#模拟js滚动</span></span><br><span class="line">js=<span class="string">&#x27;document.documentElement.scrollTop=100000&#x27;</span></span><br><span class="line">browser.execute_script(js)</span><br><span class="line">page_source<span class="comment">#获取网页源代码</span></span><br><span class="line">browser.quit()<span class="comment">#退出</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h2><ul><li><p>是什么</p><ul><li>无界面浏览器</li><li>支持页面元素查找，js的执行</li><li>由于不进行css和gui渲染，运行效率比真实浏览器要块</li></ul></li><li><p>如何使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取Phantomjs.exe文件路径</span></span><br><span class="line">browser = webdriver.PhantomJS(path)</span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="comment">#保存屏幕快照</span></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h2><ul><li>由于Phantomjs公司倒闭，使用新方法获得browser即可，具体使用同Phantomjs</li></ul><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li><li><p>response的属性以及类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r.text<span class="comment">#源码</span></span><br><span class="line">r.encoding<span class="comment">#编码方式</span></span><br><span class="line">r.url<span class="comment">#请求的url</span></span><br><span class="line">r.content<span class="comment">#响应的字节类型</span></span><br><span class="line">r.status_code<span class="comment">#状态码</span></span><br><span class="line">r.headers<span class="comment">#请求头</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">参数使用params传递</span></span><br><span class="line"><span class="string">参数无需编码</span></span><br><span class="line"><span class="string">不需要请求对象的定制</span></span><br><span class="line"><span class="string">请求资源路径中的?可省略</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r= requests.get(url=url,params=data, headers=headers)</span><br></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">不需要编解码</span></span><br><span class="line"><span class="string">不需要请求对象的定制</span></span><br><span class="line"><span class="string">参数是由data接收</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r = requests.post(url=url, data=data, headers=headers)</span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;&#125;</span><br><span class="line">r = requests.post(url=url, data=data, headers=headers, proxies=proxies)</span><br></pre></td></tr></table></figure><h2 id="cookie定制"><a href="#cookie定制" class="headerlink" title="cookie定制"></a>cookie定制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = request.session()<span class="comment">#避免请求不在同一个会话中，使用session可以使请求变成一个对象</span></span><br></pre></td></tr></table></figure><ul><li>超级鹰</li></ul><h1 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h1><h2 id="scrapy-1"><a href="#scrapy-1" class="headerlink" title="scrapy"></a>scrapy</h2><ul><li><p>是什么：一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中</p></li><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></li></ul><h3 id="项目的创建和运行"><a href="#项目的创建和运行" class="headerlink" title="项目的创建和运行"></a>项目的创建和运行</h3><ul><li><p>注意框架实在终端中进行操作的</p></li><li><p>创建scrapy项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目名</span><br></pre></td></tr></table></figure></li><li><p>项目组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目文件</span><br><span class="line">项目文件</span><br><span class="line">    __init__.py</span><br><span class="line">        自定义爬虫文件.py<span class="comment">#自己创建，爬虫的核心</span></span><br><span class="line">    __init__.py</span><br><span class="line">    items.py<span class="comment">#定义数据结构</span></span><br><span class="line">    middlewares.py<span class="comment">#中间件</span></span><br><span class="line">    pipelines.py<span class="comment">#管道</span></span><br><span class="line">    settings.py<span class="comment">#配置文件</span></span><br></pre></td></tr></table></figure></li><li><p>创建爬虫文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#跳转到spiders文件夹cd ..</span></span><br><span class="line">scrapy genspider 爬虫名 网页域名</span><br><span class="line"><span class="comment">#爬虫文件组成</span></span><br><span class="line">继承scrapy.Spider类</span><br><span class="line">    name = <span class="string">&#x27;baidu&#x27;</span><span class="comment">#运行爬虫文件使用的名字</span></span><br><span class="line">        allowed_domains<span class="comment">#允许爬虫访问的域名</span></span><br><span class="line">        start_urls<span class="comment">#声明爬虫的起始地址，可以些多个url,一般是一个</span></span><br><span class="line">        parse(self,response)<span class="comment">#解析数据回调函数</span></span><br><span class="line">          response.text<span class="comment">#响应的字符串</span></span><br><span class="line">          response.body<span class="comment">#响应的二进制文件</span></span><br><span class="line">          response.xpath<span class="comment">#返回值类型为selector列表</span></span><br><span class="line">          response.extract()<span class="comment">#提取selector对象的data属性值</span></span><br><span class="line">          response.extract_first()<span class="comment">#提取selector列表的第一个属性</span></span><br></pre></td></tr></table></figure></li><li><p>爬虫的运行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名</span><br><span class="line">robots协议</span><br></pre></td></tr></table></figure><h3 id="架构组成"><a href="#架构组成" class="headerlink" title="架构组成"></a>架构组成</h3><ul><li>引擎</li><li>下载器</li><li>spiders</li><li>调度器</li><li>管道<ul><li>清理数据</li><li>验证爬取的数据</li><li>查重</li><li>把爬取结果保存到数据库中</li></ul></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>工作原理图</li></ul><ol><li>引擎向spiders申请url</li><li>引擎将url传给调度器</li><li>调度器会将url生成请求对象放入指定的队列中</li><li>从队列中出队一个请求</li><li>引擎将请求交给下载器进行处理</li><li>下载器发送请求获取互联网数据</li><li>下载器将数据返回给引擎</li><li>引擎将得到的数据交给spiders</li><li>spiders通过解析数据的到想要的数据或者url</li><li>spiders将数据或url交给引擎</li><li>引擎判断该数据是数据还是url。数据交给管道，url交给调度器</li></ol><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><ul><li>作用方便实时调试</li><li>安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython<span class="comment">#语法高亮</span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell www.baidu..com<span class="comment">#进入</span></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">response<span class="comment">#对象</span></span><br><span class="line">response.body</span><br><span class="line">    response.text</span><br><span class="line">    response.url</span><br><span class="line">    response.status</span><br><span class="line">response<span class="comment">#解析</span></span><br><span class="line">response.xpath()</span><br></pre></td></tr></table></figure><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><ul><li>带有yield的函数是一个生成器</li><li>类似return关键字，迭代一次遇见yield就返回后面的值<ul><li>重点：下一次迭代时，从上一次迭代遇到yield后面的代码开始执行</li></ul></li></ul><h2 id="CrawSpider"><a href="#CrawSpider" class="headerlink" title="CrawSpider"></a>CrawSpider</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建时</span></span><br><span class="line">scrapy genspider -t crawl 目标网站</span><br><span class="line"><span class="comment">#链接提取</span></span><br><span class="line">link1=LinkExtractor(allow=<span class="string">r&#x27;...&#x27;</span>)<span class="comment">#正则提取</span></span><br><span class="line">    link2=LinkExtractor(restrict_xpaths=<span class="string">r&#x27;&#x27;</span>)<span class="comment">#xpath提取</span></span><br><span class="line">    link3=LinkExtractor(restrict_css=<span class="string">&#x27;&#x27;</span>)<span class="comment">#css用法</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">callback=<span class="string">&#x27;&#x27;</span><span class="comment">#参数要写字符串</span></span><br><span class="line">follow= true<span class="comment">#是否跟进</span></span><br></pre></td></tr></table></figure><h2 id="scrapy的post请求"><a href="#scrapy的post请求" class="headerlink" title="scrapy的post请求"></a>scrapy的post请求</h2><ul><li><p>重写start_requests方法</p></li><li><p>scrapy.FormRequest()参数解释</p><ul><li>url：post地址</li><li>headers：定制请求头</li><li>callback：回调函数</li><li>formdata：psot携带的数据，字典类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_request</span>(<span class="params">self</span>):</span><br><span class="line">    url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">yield</span> scrapy.FormRequest(url=url,formdata=data,callback=self.parse_second)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self,response</span>):</span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫01</title>
      <link href="/posts/ba492069.html"/>
      <url>/posts/ba492069.html</url>
      
        <content type="html"><![CDATA[<h1 id="urlib"><a href="#urlib" class="headerlink" title="urlib"></a>urlib</h1><h2 id="什么是互联网爬虫"><a href="#什么是互联网爬虫" class="headerlink" title="什么是互联网爬虫"></a>什么是互联网爬虫</h2><ul><li>通过程序在互联网中抓取自己想要的数据</li></ul><h2 id="爬虫核心"><a href="#爬虫核心" class="headerlink" title="爬虫核心"></a>爬虫核心</h2><ul><li>爬取网页</li><li>解析数据</li><li>难点：爬虫与反爬虫之间的博弈</li></ul><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><ul><li>通用爬虫<ul><li>实例：百度、谷歌等</li><li>缺点：抓取的数据大多是无用的，不能根据用户需求准确获取数据</li></ul></li><li>聚焦爬虫<ul><li>功能：根据需求实现爬虫程序，抓取需要的数据</li><li>设计思路<ul><li>确定链接</li><li>模拟浏览器通过http协议访问链接，获取服务器返回的html代码</li><li>解析html代码</li></ul></li></ul></li></ul><h2 id="反爬手段"><a href="#反爬手段" class="headerlink" title="反爬手段"></a>反爬手段</h2><ul><li>User-Agent(UA)<ul><li>通过用户代理，服务器可以识别客户是在什么环境下访问的服务器</li></ul></li><li>代理IP<ul><li>西次代理</li><li>快代理</li><li>高匿名、匿名和透明代理之间的区别<ul><li>透明代理：服务器知道你使用了代理，并且也知道你的真实IP</li><li>匿名代理：服务器知道你使用了代理，但不知道你的真实IP</li><li>高匿名代理：服务器不知道你使用了代理，也不知道你的真实IP</li></ul></li></ul></li><li>验证码访问</li><li>动态加载网页，网页返回的是js数据，并不是网页的真实数据<ul><li>selenium驱动真实的浏览器发送请求</li></ul></li><li>数据加密<ul><li>分析js代码</li></ul></li></ul><h2 id="urlib库的使用"><a href="#urlib库的使用" class="headerlink" title="urlib库的使用"></a>urlib库的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#一个类型和六个方法</span></span><br><span class="line">resopnse=urllib.request.urlopen(url)<span class="comment">#获取到对应链接的httpresponse对象</span></span><br><span class="line">content = response.read(<span class="built_in">int</span>)<span class="comment">#按字节读取页面内容，参数int可指定读取的字节数</span></span><br><span class="line">content = response.read().decode()</span><br><span class="line">content = response.readline()<span class="comment">#读取一行</span></span><br><span class="line">content = response.raadlines()<span class="comment">#读取全部数据</span></span><br><span class="line">content = response.getcode()<span class="comment">#返回状态码，200为获取数据成功</span></span><br><span class="line">url = response.geturl()<span class="comment">#返回url地址</span></span><br><span class="line">headers = response.getheaders()<span class="comment">#获取状态信息</span></span><br><span class="line"><span class="comment">#文件的下载</span></span><br><span class="line">urllib.request.urlretrieve(url,filename)<span class="comment">#url是下载链接，filename为文件名</span></span><br></pre></td></tr></table></figure><h2 id="请求对象的定制"><a href="#请求对象的定制" class="headerlink" title="请求对象的定制"></a>请求对象的定制</h2><ul><li><p>目的：解决UA反爬</p></li><li><p>url的组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#协议主机   端口号路径参数锚点</span></span><br><span class="line">http/httpswww.baidu.com<span class="number">40</span>  swd=xxx<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>定制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;&#125;<span class="comment">#参数定制</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)<span class="comment">#对象定制</span></span><br><span class="line">response = urllib.request.urlopen(request)<span class="comment">#正常访问</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="get-请求方式"><a href="#get-请求方式" class="headerlink" title="get()请求方式"></a>get()请求方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse  </span><br><span class="line">urllib.parse.quote()<span class="comment">#将中文转换为Unicode</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;王为&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">a = urllib.parse.urlencode(data)<span class="comment">#将页面的多个参数转成Unicode并用&amp;拼接</span></span><br></pre></td></tr></table></figure><h3 id="psot-请求方式"><a href="#psot-请求方式" class="headerlink" title="psot()请求方式"></a>psot()请求方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data =&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>=<span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = urllib.parse.urlencode(data)<span class="comment">#post请求方式的参数必须编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#编码之后必须调用encode方法</span></span><br><span class="line"><span class="comment">#参数是放在请求对象定制的方法中</span></span><br><span class="line">request = urllib.request.Request(url=url,data=data,headers=headers)</span><br></pre></td></tr></table></figure><h2 id="ajax的get-请求"><a href="#ajax的get-请求" class="headerlink" title="ajax的get()请求"></a>ajax的get()请求</h2><h2 id="ajax的post-请求"><a href="#ajax的post-请求" class="headerlink" title="ajax的post()请求"></a>ajax的post()请求</h2><h2 id="urlError-httpError"><a href="#urlError-httpError" class="headerlink" title="urlError\httpError"></a>urlError\httpError</h2><ul><li><p>HTTPError类是URLError类的子类</p></li><li><p>该类错误是针对浏览器无法连接到服务器而增加的错误提示</p></li><li><p>优点：可以使代码更加健硕</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.error <span class="comment">#导包</span></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    do</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:<span class="comment">#针对参数错误</span></span><br><span class="line">    do</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:<span class="comment">#针对主机错误</span></span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li></ul><h2 id="cookie登录"><a href="#cookie登录" class="headerlink" title="cookie登录"></a>cookie登录</h2><ul><li>cookie中携带着你的登录信息，如果有登录之后的cookie，那么我们就可以携带着cookie进入到任何页面</li><li>referer：判断当前路径是不是由上一个路径进来的，一般用来做图片防盗链</li></ul><h2 id="handler处理器：定制更高级的请求头"><a href="#handler处理器：定制更高级的请求头" class="headerlink" title="handler处理器：定制更高级的请求头"></a>handler处理器：定制更高级的请求头</h2><ul><li><p>基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handler = urllib,request.HTTPHandler()<span class="comment">#获取handler对象</span></span><br><span class="line">opener = urllob.request.build_opener(handler)<span class="comment">#获取opener对象</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)<span class="comment">#调用open方法</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><ul><li><p>常用功能</p><ul><li>突破自身IP访问限制，访问国外站点</li><li>访问一些单位或团体的内部资源</li><li>提高访问速度</li><li>隐藏真实IP</li></ul></li><li><p>代码配置代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;主机：端口号&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">handler = urllib,request.ProxyHandler(proxies = proxies)<span class="comment">#获取handler代理对象</span></span><br><span class="line">opener = urllob.request.build_opener(handler)<span class="comment">#获取opener对象</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)<span class="comment">#调用open方法</span></span><br></pre></td></tr></table></figure></li><li><p>代理池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random<span class="comment">#引入随机库</span></span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;代理一&#125;，</span><br><span class="line">    &#123;代理二&#125;，</span><br><span class="line">    &#123;...&#125;</span><br><span class="line">]</span><br><span class="line">proxies = random.choice(proxies_pool)</span><br></pre></td></tr></table></figure></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><ul><li><p>安装</p><ul><li>提前安装浏览器插件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml -i https://pypi.douban.com/simple<span class="comment">#安装</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree<span class="comment">#导入库</span></span><br><span class="line">etree.parse()<span class="comment">#解析本地文件</span></span><br><span class="line">etree.html()<span class="comment">#解析服务器响应文件</span></span><br><span class="line">heml_tree.xpath(xpath路径)</span><br></pre></td></tr></table></figure></li><li><p>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#路径查询</span></span><br><span class="line">//<span class="comment">#查找所有子孙节点，不考虑层级关系</span></span><br><span class="line">/<span class="comment">#查找直接子节点</span></span><br><span class="line"><span class="comment">#谓词查询</span></span><br><span class="line">//div[@<span class="built_in">id</span>]<span class="comment">#查找所有具有id属性的标签</span></span><br><span class="line">    //div[@<span class="built_in">id</span>=<span class="string">&quot;&quot;</span>]<span class="comment">#查找具有目标id的标签</span></span><br><span class="line"><span class="comment">#属性查询</span></span><br><span class="line">//@<span class="keyword">class</span></span><br><span class="line"><span class="comment">#模糊查询</span></span><br><span class="line">//div[contains(@<span class="built_in">id</span>,<span class="string">&quot;&quot;</span>)]<span class="comment">#id包含目标值的标签</span></span><br><span class="line">    //div[starts-width(@<span class="built_in">id</span>,<span class="string">&quot;&quot;</span>)]<span class="comment">#id的值以目标值开头</span></span><br><span class="line"><span class="comment">#内容查询</span></span><br><span class="line">//div/h1/text()</span><br><span class="line"><span class="comment">#逻辑运算</span></span><br><span class="line">//div[]<span class="keyword">and</span>[]<span class="comment">#和运算</span></span><br><span class="line">    //div[]|//div[]<span class="comment">#或运算</span></span><br></pre></td></tr></table></figure></li><li><p>图片懒加载：要使用加载之前的地址</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习03</title>
      <link href="/posts/940e0dd9.html"/>
      <url>/posts/940e0dd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="百宝箱"><a href="#百宝箱" class="headerlink" title="百宝箱"></a>百宝箱</h1><h2 id="什么叫模块-Modules"><a href="#什么叫模块-Modules" class="headerlink" title="什么叫模块(Modules)"></a>什么叫模块(Modules)</h2><ul><li>函数与模块的关系<ul><li>一个模块中可以包含多个函数</li></ul></li><li>在Python中一个扩展名为.py的文件就是一个模块</li><li>优点<ul><li>方便其他程序和脚本的导入并使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性</li><li>提高代码的复用性</li></ul></li><li>模块包含函数，类和语句等</li></ul><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ul><li><p>创建模块</p><ul><li>新建一个.py文件，名称尽量不要与python自带的标准模块名称相同</li></ul></li><li><p>导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名 [<span class="keyword">as</span> 别名]</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数/变量/类</span><br></pre></td></tr></table></figure></li></ul><h2 id="以主程序的形式执行"><a href="#以主程序的形式执行" class="headerlink" title="以主程序的形式执行"></a>以主程序的形式执行</h2><ul><li>在每个模块的定义中都包括一个记录模块名称的变量，该变量可以确定模块在哪个模块中执行，如果一个模块在自己的程序下执行，那么他的__name__变量的值应为__main__</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__=<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</li><li>作用<ul><li>代码规范</li><li>避免模块名称冲突</li></ul></li><li>包与目录的区别<ul><li>包含__init__.py文件的目录称为包</li><li>目录通常不包含__init__.py文件</li></ul></li><li>包的导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br></pre></td></tr></table></figure><ul><li>常用的内置模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sys<span class="comment">#与解释器及其环境操作相关的标准库</span></span><br><span class="line">time<span class="comment">#与时间相关的各种函数的标准库</span></span><br><span class="line">os<span class="comment">#访问操作系统服务功能的标准库</span></span><br><span class="line">calendar<span class="comment">#与日期相关的各种函数的标准库</span></span><br><span class="line">urllib<span class="comment">#读取网上(服务器)的数据标准库</span></span><br><span class="line">json<span class="comment">#用于使用json序列化和反序列化对象</span></span><br><span class="line">re<span class="comment">#执行正则表达式的匹配和替换</span></span><br><span class="line">math<span class="comment">#算数运算的标准库</span></span><br><span class="line">decimal<span class="comment">#控制运算精度，有效位数和四舍五入的十进制运算</span></span><br><span class="line">logging<span class="comment">#灵活的记录事件、错误、警告和调试信息等日志信息的功能</span></span><br></pre></td></tr></table></figure><h2 id="第三方模块的安装与使用"><a href="#第三方模块的安装与使用" class="headerlink" title="第三方模块的安装与使用"></a>第三方模块的安装与使用</h2><ul><li>安装</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 模块名</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br></pre></td></tr></table></figure><h1 id="大宝藏"><a href="#大宝藏" class="headerlink" title="大宝藏"></a>大宝藏</h1><h2 id="编码格式的介绍"><a href="#编码格式的介绍" class="headerlink" title="编码格式的介绍"></a>编码格式的介绍</h2><ul><li>python的解释器使用的是Unicode(内存)</li><li>.py文件在磁盘上使用utf-8存储(外存)</li></ul><h2 id="文件的读写原理"><a href="#文件的读写原理" class="headerlink" title="文件的读写原理"></a>文件的读写原理</h2><ul><li>操作流程<ul><li>python操作文件</li><li>打开或创建文件</li><li>读写文件</li><li>关闭资源</li></ul></li><li>操作原理</li></ul><h2 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a>文件读写操作</h2><ul><li>内置函数open()创建文件对象</li><li>语法规则</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(文件名 [,mode,encoding])<span class="comment">#模式默认为只读，默认文本文件中字符的编写格式为gbk</span></span><br></pre></td></tr></table></figure><ul><li><p>常用的文件打开格式</p><ul><li><p>文件的类型</p><ul><li>文本文件</li><li>二进制文件</li></ul></li><li><p>打开模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r<span class="comment">#以只读的形式打开文件，文件的指针将会放在开头</span></span><br><span class="line">w<span class="comment">#以只写的方式打开文件，如果文件不存在则创建文件，如果文件存在则覆盖原文件内容，文件的指针将会放在文件的开头</span></span><br><span class="line">a<span class="comment">#以追加的方式打开文件，如果文件不存在则创建文件，指针放在文件的开头，如果文件存在，指针放在文件的末尾</span></span><br><span class="line">b<span class="comment">#以二进制方式打开文件，不能单独使用，需要与其他模式一起使用，rb或wb</span></span><br><span class="line">+<span class="comment">#以读写方式打开文件不能单独使用，需要与其他模式一起使用，a+</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="文件对象常用的方法"><a href="#文件对象常用的方法" class="headerlink" title="文件对象常用的方法"></a>文件对象常用的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">read([size])<span class="comment">#从文件读取size个字节或字符的内容返回，若省略size，则返回文件全部内容</span></span><br><span class="line">readline()<span class="comment">#从文件中读取一行内容</span></span><br><span class="line">readlines()<span class="comment">#把文本中的每一行都变成独立的字符串对象，并将这些对象放入列表中返回</span></span><br><span class="line">write(<span class="built_in">str</span>)<span class="comment">#将字符串写入文件中</span></span><br><span class="line">writelines(s_list)<span class="comment">#将字符串列表写入文本文件，不添加换行符</span></span><br><span class="line">seek(offset[,whence])<span class="comment">#把文件指针移动到新的位置，offset表示相对于whence的位置</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">offset参数解释</span></span><br><span class="line"><span class="string">正：往结束方向移动</span></span><br><span class="line"><span class="string">负：往开始方向移动</span></span><br><span class="line"><span class="string">whence参数解释</span></span><br><span class="line"><span class="string">0：开头，默认值</span></span><br><span class="line"><span class="string">1：当前位置</span></span><br><span class="line"><span class="string">2：结尾</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tell()<span class="comment">#返回文件指针的当前位置</span></span><br><span class="line">flush()<span class="comment">#将缓冲区的内容写入文件，但不关闭文件</span></span><br><span class="line">close()<span class="comment">#把缓冲区的文件写入文件，同时关闭文件，并且释放文件对象相关资源</span></span><br></pre></td></tr></table></figure><h2 id="with语句-上下文管理器"><a href="#with语句-上下文管理器" class="headerlink" title="with语句(上下文管理器)"></a>with语句(上下文管理器)</h2><ul><li>自动管理上下文资源，无论什么原因跳出with块，都能确保文件正确的关闭以此达到释放资源的目的</li><li>上下文对象：遵守了上下文管理协议的类的实例对象<ul><li>上下文管理协议：类中实现了__enter__()方法和__exit__()方法</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> 上下文语句 <span class="keyword">as</span> 可选项上下文对象的引用:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ul><li>os模块时内置的与操作系统功能和文件系统相关的模块，该模块中的语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样</li><li>os模块与os.path模块用于对目录或文件进行操作</li></ul><h2 id="os模块操作目录相关函数"><a href="#os模块操作目录相关函数" class="headerlink" title="os模块操作目录相关函数"></a>os模块操作目录相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getcwd()<span class="comment">#返回当前工作目录</span></span><br><span class="line">listdir(path)<span class="comment">#返回指定路径下的文件和目录信息</span></span><br><span class="line">mkdir(path[,mode])<span class="comment">#创建目录</span></span><br><span class="line">makedirs(path1/path2/...[,mode])<span class="comment">#创建多级目录</span></span><br><span class="line">rmdir(path)<span class="comment">#删除目录</span></span><br><span class="line">removedirs(path1/path2...)<span class="comment">#删除多级目录</span></span><br><span class="line">chdir(path)<span class="comment">#将path设置为当前工作目录</span></span><br></pre></td></tr></table></figure><h2 id="os-path模块操作目录相关函数"><a href="#os-path模块操作目录相关函数" class="headerlink" title="os.path模块操作目录相关函数"></a>os.path模块操作目录相关函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">abspath(path)<span class="comment">#用于获取文件或目录的绝对路径</span></span><br><span class="line">exists(path)<span class="comment">#用于判断文件或目录是否存在，存在返回True,不存在返回False</span></span><br><span class="line">join(path,name)<span class="comment">#将目录与目录或者文件名拼接起来</span></span><br><span class="line">splittext()<span class="comment">#分离文件名和扩展名</span></span><br><span class="line">basename(path)<span class="comment">#从一个目录中提取文件名</span></span><br><span class="line">dirname(path)<span class="comment">#从一个路径中提取文件路径，不包括文件名</span></span><br><span class="line">isdir()<span class="comment">#判断是否为路径</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习02</title>
      <link href="/posts/e3093d4f.html"/>
      <url>/posts/e3093d4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="驻留机制"><a href="#驻留机制" class="headerlink" title="驻留机制"></a>驻留机制</h2><ul><li>不可变序列</li><li>仅保留一份相同且不可变字符串，不同的值被放进字符串的驻留池中，相同字符串只留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是将该字符串的地址赋给新创建的变量，驻留的字符串要符合相关规则</li><li><em>强制驻留</em>：sys中的intern方法</li><li>优缺点：拼接字符串和修改字符串比较影响性能，使用str中的jion()方法会先计算出所有字符串的长度没然后再拷贝，只生成一个对象</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index()<span class="comment">#查找子串第一次出现的位置，不存在抛出异常ValueError</span></span><br><span class="line">rindex()<span class="comment">#查找子串最后出现的位置，不存在抛出异常ValueError</span></span><br><span class="line">find()<span class="comment">#查找子串第一次出现的位置，不存在返回-1</span></span><br><span class="line">rfind()<span class="comment">#查找子串最后出现的位置，不存在返回-1</span></span><br></pre></td></tr></table></figure><h3 id="大小写操作"><a href="#大小写操作" class="headerlink" title="大小写操作"></a>大小写操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upper()<span class="comment">#将字符串中所有字母转大写</span></span><br><span class="line">lower()<span class="comment">#转小写</span></span><br><span class="line">swapcase()<span class="comment">#大转小，小转大</span></span><br><span class="line">capitalize()<span class="comment">#将第一个字符大写，其余字符小写</span></span><br><span class="line">title()<span class="comment">#每个单词第一个字符大写，其余字符小写</span></span><br></pre></td></tr></table></figure><h3 id="字符串对齐"><a href="#字符串对齐" class="headerlink" title="字符串对齐"></a>字符串对齐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cneter()<span class="comment">#居中，两个参数，宽度，填充符，宽度不够显示原字符串</span></span><br><span class="line">ljust()<span class="comment">##左对齐，两个参数，同上</span></span><br><span class="line">rjust()<span class="comment">#右对齐，两个参数，同上</span></span><br><span class="line">zfill()<span class="comment">#右对齐，一个参数。左边用0补齐</span></span><br></pre></td></tr></table></figure><h3 id="字符串劈分"><a href="#字符串劈分" class="headerlink" title="字符串劈分"></a>字符串劈分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split()</span><br></pre></td></tr></table></figure><ul><li>从左边开始劈分，默认分隔符为空格，返回的值是一个列表</li><li>通过参数sep指定分隔符</li><li>通过参数maxsplit指定最大劈分数，经过最大劈分后，剩余的部分将会单独作为一部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsplit()</span><br></pre></td></tr></table></figure><ul><li>从右边开始劈分，其余同上</li></ul><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">isidentifier()<span class="comment">#是否为合法标识符</span></span><br><span class="line">isspace()<span class="comment">#判断字符串是否全部由空白字符组成（回车、换行、水平制表符）</span></span><br><span class="line">isalpha()<span class="comment">#是否全部由字母组成</span></span><br><span class="line">isdecimal()<span class="comment">#是否全部由十进制数字组成</span></span><br><span class="line">isnumeric()<span class="comment">#是否全部由数字组成</span></span><br><span class="line">isalnum()<span class="comment">#是否全部由字母和数字组成</span></span><br></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">replace()子串替换函数</span></span><br><span class="line"><span class="string">第一个参数为被替换子串</span></span><br><span class="line"><span class="string">第二个参数为目标子串</span></span><br><span class="line"><span class="string">第三个参数为指定替换次数</span></span><br><span class="line"><span class="string">该函数返回一个替换后的子串，替换前的子串不发生变化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">replace()</span><br><span class="line">join()<span class="comment">#将列表或元组中的字符串合并成一个字符串</span></span><br><span class="line"><span class="string">&#x27;*&#x27;</span>.join(<span class="string">&#x27;python&#x27;</span>)<span class="comment">#p*y*t*h*o*n</span></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h2 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h2><ul><li><p>由于字符串是不可变类型，切片产生新的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[start:stop:step]</span><br></pre></td></tr></table></figure></li></ul><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;名字%s,年龄%d岁&#x27;</span> % (name.age)<span class="comment">#%为占位符</span></span><br><span class="line"><span class="string">&#x27;名字&#123;0&#125;，年龄&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name,age)</span><br><span class="line"><span class="comment">#格式控制</span></span><br><span class="line"><span class="string">&#x27;%10d&#x27;</span> % (<span class="number">99</span>)</span><br><span class="line"><span class="string">&#x27;&#123;:10.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>)</span><br></pre></td></tr></table></figure><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">decode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="函数的创建与调用"><a href="#函数的创建与调用" class="headerlink" title="函数的创建与调用"></a>函数的创建与调用</h1><ul><li><p>创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span> (输入参数):</span><br><span class="line">    函数体</span><br><span class="line">    [<span class="keyword">return</span> xxx]</span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名([实际参数])</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h1><ul><li><p>位置实参</p><ul><li>根据相应的位置进行实参传递</li></ul></li><li><p>关键字实参</p><ul><li>根据形参名称进行实参传递</li></ul></li><li><p>函数执行过后对参数的影响</p><ul><li>不可变对象，在函数体的修改不会影响实参的值</li><li>可变对象，在函数体的修改会影响到实参的值</li></ul></li></ul><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><ul><li>函数返回多个值时，结果为元组</li><li>返回一个值时，直接返回原数据</li><li>无返回值时，return可以省略不写</li></ul><h1 id="函数的参数定义"><a href="#函数的参数定义" class="headerlink" title="函数的参数定义"></a>函数的参数定义</h1><ul><li><p>函数定义默认值参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a=<span class="number">10</span>,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure></li><li><p>个数可变的位置参数</p><ul><li>使用*定义个数可变的位置形参</li><li>结果为一个元组</li></ul></li><li><p>个数可变的关键字参数</p><ul><li>使用**定义个数可变的关键字形参</li><li>结果为一个字典</li></ul></li></ul><h1 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><ul><li><p>局部变量</p><ul><li>在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就变成全局变量</li></ul></li><li><p>全局变量</p><ul><li>函数体外定义的变量，可作用于函数内外</li></ul></li></ul><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><ul><li>什么是递归函数<ul><li>如果一个函数体内调用了该函数本身，这个函数就称为递归函数</li></ul></li><li>递归函数的组成部分<ul><li>递归调用和递归终止条件</li></ul></li><li>递归的调用过程<ul><li>每递归调用一次函数，都会在栈内存分配一个栈帧</li><li>每执行完一次函数，都会释放相应的空间</li></ul></li><li>递归的优缺点<ul><li>缺点：占用内存多，效率低下</li><li>优点：思路和代码简单</li></ul></li></ul><h1 id="Bug的由来及分类"><a href="#Bug的由来及分类" class="headerlink" title="Bug的由来及分类"></a>Bug的由来及分类</h1><h1 id="不同异常类型的处理方式"><a href="#不同异常类型的处理方式" class="headerlink" title="不同异常类型的处理方式"></a>不同异常类型的处理方式</h1><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型 :</span><br><span class="line">    异常处理代码</span><br></pre></td></tr></table></figure><ul><li><p>多个异常处理结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span> :</span><br><span class="line">    异常处理代码</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span> :</span><br><span class="line">    异常处理代码</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">3</span> :</span><br><span class="line">    异常处理代码</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">4</span> :</span><br><span class="line">    异常处理代码            </span><br></pre></td></tr></table></figure></li><li><p>try…except…else结构</p><ul><li>如果try中没有异常，则执行else块，如果try有异常，则执行except块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型 :</span><br><span class="line">    异常处理代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li><li><p>try…except…else…finally结构</p><ul><li>finally块无论是否发生异常都会被执行，常用来释放try块中申请的资源</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型 :</span><br><span class="line">    异常处理代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">     must do</span><br></pre></td></tr></table></figure></li><li><p>常见的异常类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError<span class="comment">#零无法除尽</span></span><br><span class="line">IndexError<span class="comment">#索引越界</span></span><br><span class="line">KeyError<span class="comment">#映射中没有key</span></span><br><span class="line">NameError<span class="comment">#未声明/初始化对象</span></span><br><span class="line">SyntaxError<span class="comment">#语法错误</span></span><br><span class="line">ValueError<span class="comment">#传入无效参数</span></span><br></pre></td></tr></table></figure></li><li><p>traceback</p><ul><li><p>使用traceback模块打印异常信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback<span class="comment">#导包</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型 :</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="PyCharm的调试模式"><a href="#PyCharm的调试模式" class="headerlink" title="PyCharm的调试模式"></a>PyCharm的调试模式</h1><ul><li>断点<ul><li>程序运行到此处，暂时挂起，停止执行，方便观察程序运行情况进而做出相应调整</li></ul></li><li>进入调试视图</li></ul><h1 id="两大编程思想"><a href="#两大编程思想" class="headerlink" title="两大编程思想"></a>两大编程思想</h1><ul><li>面向过程</li><li>面向对象</li></ul><h1 id="类和对象的创建"><a href="#类和对象的创建" class="headerlink" title="类和对象的创建"></a>类和对象的创建</h1><ul><li><p>类是多个类似事物组成的群体的统称</p></li><li><p>对象是类的实例</p></li><li><p>类的创建语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span> :</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>类的组成</p><ul><li><p>属性</p></li><li><p>实例方法</p></li><li><p>静态方法</p></li><li><p>类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :</span><br><span class="line">    native_pace=<span class="string">&#x27;吉林&#x27;</span> <span class="comment">#直接写在类里的变量是类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name<span class="comment">#对实例属性进行赋值</span></span><br><span class="line">        self.age=age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):<span class="comment">#实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在吃饭&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>():<span class="comment">#不允许调用self</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cm</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类方法&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对象的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实例名=类名()</span><br><span class="line">stu=Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="comment">#方法调用</span></span><br><span class="line">stu.eat()</span><br><span class="line">Student.eat(stu)</span><br></pre></td></tr></table></figure></li></ul><h1 id="类属性、类方法与静态方法"><a href="#类属性、类方法与静态方法" class="headerlink" title="类属性、类方法与静态方法"></a>类属性、类方法与静态方法</h1><ul><li>类属性：类中方法外的变量，被该类的所有对象所共享<ul><li>一个实例对象修改，所有实例对象都会改变</li></ul></li><li>类方法：@classmethod修饰，使用类名直接访问</li><li>静态方法：@staticmethod修饰，使用类名直接访问</li></ul><h2 id="动态绑定属性和方法"><a href="#动态绑定属性和方法" class="headerlink" title="动态绑定属性和方法"></a>动态绑定属性和方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>:</span><br><span class="line">    do</span><br><span class="line">stu=Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">stu,gender=<span class="string">&#x27;男&#x27;</span><span class="comment">#动态绑定属性</span></span><br><span class="line">stu.show=show<span class="comment">#动态绑定方法</span></span><br></pre></td></tr></table></figure><h1 id="封装、继承"><a href="#封装、继承" class="headerlink" title="封装、继承"></a>封装、继承</h1><ul><li><p>面向对象的三大特征</p><ul><li><p>封装：提高程序的安全性</p><ul><li><p>如果不希望属性被外部调用可以在定义属性时在前面添加__(两个下划线)</p></li><li><p>加下划线的属性访问还可以通过_类名__属性名访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :</span><br><span class="line">    native_pace=<span class="string">&#x27;吉林&#x27;</span> <span class="comment">#直接写在类里的变量是类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name<span class="comment">#对实例属性进行赋值</span></span><br><span class="line">        self.__age=age<span class="comment">#age只能通过内部定义的函数才能访问，直接调用无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_Student__age)<span class="comment">#外部访问</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>继承：提高代码复用性</p><ul><li><p>如果一个类没有任何父类，则默认继承object类</p></li><li><p>python支持多继承</p></li><li><p>定义子类时，必须在器构造函数中调用父类的构造函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类类型</span> (父类<span class="number">1</span>,父类<span class="number">2.</span>..):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inif__</span>(<span class="params">self,name,age</span>)</span><br><span class="line">    self,name=name</span><br><span class="line">    self,age=age</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Father</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__inif__</span>(<span class="params">self,name,age,score</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age)</span><br><span class="line">        self.score=score</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多态：提高程序的可扩展性和可维护性</p></li></ul></li></ul><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><ul><li>如果子类对继承父类的某个属性或方法不满意，可以在子类中对其方法体进行重新编写</li><li>子类重写后的方法中，可以通过super().xxx()调用父类被重写的方法</li></ul><h1 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h1><ul><li>该类时所有类的父类，因此所有类都有它的属性和方法</li><li>内置函数dir()可以查看指定对象所有属性，常用来查看对象的信息</li><li>该类的__str__()方法，用于返回对于一个对象的描述，经常对该方法进行重写</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li>即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法。</li></ul><h1 id="特殊方法和特殊属性"><a href="#特殊方法和特殊属性" class="headerlink" title="特殊方法和特殊属性"></a>特殊方法和特殊属性</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__dict__()<span class="comment">#获得类对象所绑定的属性或实例对象所绑定的方法的字典</span></span><br><span class="line">__len__(self)<span class="comment">#输出对象的长度</span></span><br><span class="line">__add__(self,other)<span class="comment"># 实现两个对象的加法运算</span></span><br><span class="line">__new__(cls,*args,**kwargs)<span class="comment">#创建对象，申请内存空间</span></span><br><span class="line">__init__(self,属性...)<span class="comment">#初始化</span></span><br></pre></td></tr></table></figure><h1 id="类的浅拷贝与深拷贝"><a href="#类的浅拷贝与深拷贝" class="headerlink" title="类的浅拷贝与深拷贝"></a>类的浅拷贝与深拷贝</h1><ul><li>变量的赋值<ul><li>只是形成两个变量，实际上还是指向一个对象</li></ul></li><li>浅拷贝<ul><li>一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝，因此，源对象和拷贝对象会引用同一个子对象</li></ul></li><li>深拷贝<ul><li>使用copy模块的deepcopy函数，递归拷贝对象中包含子对象，源对象和拷贝对象所有的子对象也不相同</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习01</title>
      <link href="/posts/7a006cf5.html"/>
      <url>/posts/7a006cf5.html</url>
      
        <content type="html"><![CDATA[<h1 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h1><ul><li>输出内容<ul><li>数字</li><li>字符串</li><li>带有运算符的表达式</li></ul></li><li>输出目的地<ul><li>显示器</li><li>文件</li></ul></li><li>输出形式<ul><li>换行</li><li>不换行</li></ul></li></ul><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><ul><li><p>制表位是否重开取决于上一个制表位是否被占满，满则重开</p></li><li><p>原字符：字符串开头加r</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello world!&#x27;</span>)<span class="comment"># 最后一个字符不能是反斜线</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="二进制和编码"><a href="#二进制和编码" class="headerlink" title="二进制和编码"></a>二进制和编码</h1><ul><li>Ascall</li></ul><h1 id="保留字和标识符"><a href="#保留字和标识符" class="headerlink" title="保留字和标识符"></a>保留字和标识符</h1><h1 id="变量的定义和使用"><a href="#变量的定义和使用" class="headerlink" title="变量的定义和使用"></a>变量的定义和使用</h1><ul><li><p>变量三要素</p><ul><li>标识：id（name）</li><li>类型：type（name）</li><li>值：name</li></ul></li><li><p>变量的多次赋值</p></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><p>整数</p><ul><li>默认表示十进制</li><li>二进制0b开头</li><li>八进制0o开头</li><li>十六进制0x开头</li></ul></li><li><p>浮点</p><ul><li><p>整数部分加小数部分</p></li><li><p>存储不精确性</p><ul><li><p>原因：小数是采用二进制存储的</p></li><li><p>解决方案：导入模块decimal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1.1&#x27;</span>)+Decimal(<span class="string">&#x27;2.2&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>布尔</p><ul><li><p>表示真True或假False</p></li><li><p>布尔值可以转化为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> +<span class="number">1</span>)<span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> +<span class="number">1</span>)<span class="comment">#1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串</p><ul><li>不可变的字符序列</li><li>可以使用单、双、三引号来定义</li><li>单引号和双引号必须在一行</li><li>三引号可以分布在连续的多行</li></ul></li></ul><h1 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h1><ul><li><p>将不同数据类型拼接时需要用到类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#x27;</span> + name + <span class="string">&#x27;我今年&#x27;</span> + <span class="built_in">str</span>(age) +<span class="string">&#x27;岁了&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>str()：将其他类型转为字符串类型</p></li><li><p>int：将其他类型转为整数类型</p><ul><li>转换的字符串必须为数字串</li><li>浮点数会舍去小数部分，只是获取整数部分</li><li>小数字符串无法转换成整型</li></ul></li><li><p>float：将其他类型转为浮点数类型</p><ul><li>文字类无法转换</li><li>整型转换为整数部分加.0</li></ul></li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释：#</li><li>多行注释：三引号，如果将三引号内容赋值给变量，三引号内容为字符串，否则为多行注释</li><li>编码注释声明：python3后可不考虑</li></ul><h1 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h1><ul><li><p>作用：接受来自用户的输入</p></li><li><p>返回值类型：字符串</p></li><li><p>值的存储：使用赋值方式进行存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">&#x27;提示语句&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li><p>算术运算符</p><ul><li><p>标准算数运算符：加减乘除(/)、整除(//)</p></li><li><p>取余运算符：%</p></li><li><p>幂运算符：**</p></li><li><p>//一正一负向下取整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">9</span>//-<span class="number">4</span>)<span class="comment">#-3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>赋值运算符</p><ul><li><p>执行顺序：右到左赋值</p></li><li><p>支持链式赋值</p></li><li><p>支持参数赋值</p></li><li><p>支持系列解包赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=<span class="number">20</span><span class="comment">#链式</span></span><br><span class="line">+= -= *= /= //= %=<span class="comment">#参数</span></span><br><span class="line">a,b,c=<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span><span class="comment">#解包</span></span><br><span class="line">a,b=b,a<span class="comment">#快捷交换</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>比较运算符</p><ul><li>&gt; ,&lt; , &gt;=,&lt;=,!=</li><li>==：对值进行比较</li><li>is, is not：对id进行比较，，在python中，为了节省内存，对于比较小的数字，如果已经有相同值存在于内存中，就继续使用原地址，比较大的数字就会新建内存区域</li></ul></li><li><p>布尔运算符</p><ul><li>and, or, not, in, not in</li><li>not：对运算数取反</li></ul></li><li><p>位运算符</p><ul><li>&amp;：对应位数都是1结果才是一</li><li>|：对应位数都是0结果才是0</li><li>&lt;&lt;：高位数舍弃，低位补零</li><li>&gt; &gt; ：低位舍弃，高位补零</li></ul></li><li><p>优先级：算术、位、比较、布尔、赋值</p></li></ul><h1 id="程序的组织结构"><a href="#程序的组织结构" class="headerlink" title="程序的组织结构"></a>程序的组织结构</h1><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><h1 id="对象的布尔值"><a href="#对象的布尔值" class="headerlink" title="对象的布尔值"></a>对象的布尔值</h1><ul><li>python一切皆为对象，获取对象的布尔值仅需使用对象的内置函数bool()</li><li>布尔值为False的对象：False,0,None，空字符串，空列表，空元组，空字典，空集合</li></ul><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><ul><li><p>单分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    执行体</span><br></pre></td></tr></table></figure></li><li><p>双分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> exp1:</span><br><span class="line">    do</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li><li><p>多分支结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> exp1:</span><br><span class="line">    do1</span><br><span class="line"><span class="keyword">elif</span> exp2:</span><br><span class="line">    do2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do3</span><br></pre></td></tr></table></figure></li><li><p>if语句的嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> exp1:</span><br><span class="line">    <span class="keyword">if</span> exp11:</span><br><span class="line">        do</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        do</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li><li><p>条件表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">true <span class="keyword">if</span> exp <span class="keyword">else</span> false</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">if</span> exp:</span><br><span class="line">    <span class="built_in">print</span>(true)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(false)</span><br></pre></td></tr></table></figure></li><li><p>pass空语句</p><ul><li>占位符，什么都不会做，用于撑起语法结构</li></ul></li></ul><h1 id="Range-函数的使用"><a href="#Range-函数的使用" class="headerlink" title="Range()函数的使用"></a>Range()函数的使用</h1><ul><li><p>range()</p><ul><li><p>用来生成一个整数序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(stop)<span class="comment">#生成一个0到stop步长为1的整数序列</span></span><br><span class="line"><span class="built_in">range</span>(start,stop)<span class="comment">#生成一个start到stop步长为1的整数序列</span></span><br><span class="line"><span class="built_in">range</span>(start, stop, step)<span class="comment">#生成一个start到stop步长为step的整数序列</span></span><br></pre></td></tr></table></figure></li><li><p>返回一个迭代器对象</p></li><li><p>优点为不论对象表示的整数序列有多长，所有range对象占用的内存空间都是一样的，应为仅仅需要存储三个参数，只有当用到对象时，才会去计算相关元素对应的值</p></li></ul></li></ul><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> exp:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure><ul><li>循环结构与选择结构的区别<ul><li>if判断一次，条件符合执行一次</li><li>while判断N+1次，条件符合执行N次</li></ul></li></ul><h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 自定义变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure><ul><li>in表示从字符串、序列等中依次取值，又称为遍历</li><li>遍历的对象必须是可迭代的对象</li><li>循环体内不需要访问自定义变量，可以将自定义变量替代为下划线</li></ul><h1 id="break、continue语句"><a href="#break、continue语句" class="headerlink" title="break、continue语句"></a>break、continue语句</h1><ul><li>break：用于结束循环结构，通常与if分支一起使用</li><li>break：用于结束当前循环，进入下一次玄幻，通常与if分支一起使用</li><li>else：如果循环当中没有出现break，即循环正常结束就会执行else</li></ul><h1 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h1><h1 id="列表的创建与删除"><a href="#列表的创建与删除" class="headerlink" title="列表的创建与删除"></a>列表的创建与删除</h1><ul><li><p>列表可以存储N个元素，方便程序对这些数据进行整体操作</p></li><li><p>列表的创建</p><ul><li><p>使用中括号</p></li><li><p>调用内置函数list()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="string">&#x27;你好&#x27;</span>,<span class="number">1</span>]</span><br><span class="line">lst2 = <span class="built_in">list</span>([<span class="string">&#x27;你好&#x27;</span>，<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><p>列表的特点</p><ul><li>列表元素有序排列</li><li>索引映射唯一数据</li><li>可以存储重复元素</li><li>任意数据类型混搭</li><li>根据需要动态分配和回收内存</li></ul></li></ul></li></ul><h1 id="列表的查询操作"><a href="#列表的查询操作" class="headerlink" title="列表的查询操作"></a>列表的查询操作</h1><ul><li><p>获取列表中指定元素的索引index</p><ul><li><p>如果列表中有多个相同元素，则返回第一个相同元素的索引</p></li><li><p>如果查询的元素在表中不存在，则抛出异常ValueError</p></li><li><p>可以在指定的start和stop之间查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.index(<span class="string">&#x27;你好&#x27;</span>,start, stop)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取列表中的单个元素</p><ul><li>正向索引0到N-1</li><li>反向索引-N到-1</li><li>指定索引不存在，抛出异常IndexError</li></ul></li><li><p>获取列表中的多个元素</p><ul><li><p>列表切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>[start:stop:step]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断指定元素在列表中是否存在</p><ul><li>元素 in 列表名</li><li>元素 not in 列表名</li></ul></li><li><p>列表元素的遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> lst1:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure></li></ul><h1 id="列表的增删改操作"><a href="#列表的增删改操作" class="headerlink" title="列表的增删改操作"></a>列表的增删改操作</h1><ul><li><p>列表元素的增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">append()<span class="comment">#在列表末尾添加一个元素</span></span><br><span class="line">extend()<span class="comment">#在列表末尾至少添加一个元素</span></span><br><span class="line">lst1.extend(lst2)<span class="comment">#具体实现可以是将一个列表中的每一个元素都添加到目标列表</span></span><br><span class="line">insert()<span class="comment">#在列表任意位置添加一个元素</span></span><br><span class="line">lst1[<span class="number">1</span>:]=lst3<span class="comment">#切片，在列表中任意位置添加至少一个元素,后面的元素没有保留下来</span></span><br></pre></td></tr></table></figure></li><li><p>列表元素的删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remove()<span class="comment">#一次删除一个元素、重复元素只删除第一个、元素不存在抛出异常ValueError</span></span><br><span class="line">pop()<span class="comment">#删除一个指定索引位置的元素、指定索引不存在抛出异常IndexError、不指定索引删除列表最后一位元素</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>]=[]<span class="comment">#切片一次至少删除一个元素</span></span><br><span class="line">clear()<span class="comment">#清空列表</span></span><br><span class="line"><span class="keyword">del</span>()<span class="comment">#删除列表</span></span><br></pre></td></tr></table></figure></li><li><p>列表元素的修改</p><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul></li></ul><h1 id="列表元素的排序"><a href="#列表元素的排序" class="headerlink" title="列表元素的排序"></a>列表元素的排序</h1><ul><li><p>调用sort()方法，列表中所有元素都按照从小到大的顺序进行排序，可以指定reverse=True,进行降序排序,原列表发生改变</p></li><li><p>调用内置函数sorted(),可以指定reverse=True.进行降序排序，原列表不发生改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">newlst=<span class="built_in">sorted</span>(lst, reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><ul><li><p>生成列表的公式，语法格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[exp <span class="keyword">for</span> 自定义变量 <span class="keyword">in</span> 可迭代对象]</span><br></pre></td></tr></table></figure></li></ul><h1 id="什么是字典"><a href="#什么是字典" class="headerlink" title="什么是字典"></a>什么是字典</h1><ul><li><p>可变序列</p></li><li><p>以键值对的方式存储数据，字典是一个无序的序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;zhang&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;sun&#x27;</span>:<span class="number">99</span>,<span class="string">&#x27;li&#x27;</span>:<span class="number">45</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="字典的原理"><a href="#字典的原理" class="headerlink" title="字典的原理"></a>字典的原理</h1><h1 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h1><ul><li><p>花括号</p></li><li><p>内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;zhang&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;sun&#x27;</span>:<span class="number">99</span>,<span class="string">&#x27;li&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line">dict1=<span class="built_in">dict</span>(name=<span class="string">&#x27;jack&#x27;</span>,age=<span class="number">20</span>)</span><br><span class="line">dic=&#123;&#125;<span class="comment">#空字典的创建</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="字典的查询操作"><a href="#字典的查询操作" class="headerlink" title="字典的查询操作"></a>字典的查询操作</h1><ul><li><p>字典中元素的获取</p><ul><li><p>[]</p></li><li><p>get()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores[<span class="string">&#x27;zhang&#x27;</span>]</span><br><span class="line">scores.get(<span class="string">&#x27;zhang&#x27;</span>)</span><br><span class="line">score.get(<span class="string">&#x27;huang&#x27;</span>,<span class="number">98</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取方法的区别</p><ul><li>[]如果字典中不存在key,抛出keyError</li><li>get()如果字典中不存在key并不会抛出异常，而是返回None，可以通过参数设置默认的值，以便指定的key不存在时返回</li></ul></li></ul><h1 id="字典元素的增删改操作"><a href="#字典元素的增删改操作" class="headerlink" title="字典元素的增删改操作"></a>字典元素的增删改操作</h1><ul><li><p>key的判断：in，not in</p></li><li><p>字典的删除：del scores[‘zhang’]</p></li><li><p>字典元素的新增：dic[‘jack’]=90</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;zhang&#x27;</span><span class="keyword">in</span> scores</span><br><span class="line"><span class="keyword">del</span> scores[<span class="string">&#x27;zhang&#x27;</span>]</span><br><span class="line">dic[<span class="string">&#x27;jack&#x27;</span>]=<span class="number">90</span><span class="comment">#既可增加也可修改</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="获取字典视图"><a href="#获取字典视图" class="headerlink" title="获取字典视图"></a>获取字典视图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys()<span class="comment">#获取字典中所有的key</span></span><br><span class="line">values()<span class="comment">#获取字典中所有的value</span></span><br><span class="line">items()<span class="comment">#获取字典所有的键值对</span></span><br></pre></td></tr></table></figure><h1 id="字典元素的遍历"><a href="#字典元素的遍历" class="headerlink" title="字典元素的遍历"></a>字典元素的遍历</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scores:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure><h1 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h1><ul><li>字典中所有元素都是键值对，key不允许重复，value可以重复</li><li>字典中的元素时无序的</li><li>字典中的key必须是不可变对象</li><li>字典也可以根据需要动态伸缩</li><li>字典会浪费较大的内存，是一种使用空间换时间的数据结构</li></ul><h1 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h1><ul><li><p>zip():内置函数，用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;item.upper():price <span class="keyword">for</span> item, price <span class="keyword">in</span> <span class="built_in">zip</span>(items,prices)&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="什么是元组"><a href="#什么是元组" class="headerlink" title="什么是元组"></a>什么是元组</h1><ul><li>python内置的数据结构之一，是一个不可变序列</li><li>不可变序列与可变序列的区别<ul><li>不可变序列：字符串、数组<ul><li>没有增删改查</li></ul></li><li>可变序列：列表、字典<ul><li>可以进行增删改查，对象地址不发生改变</li></ul></li></ul></li></ul><h1 id="元组的创建方式"><a href="#元组的创建方式" class="headerlink" title="元组的创建方式"></a>元组的创建方式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t=(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">90</span>)<span class="comment">#直接小括号</span></span><br><span class="line">t=<span class="built_in">tuple</span>(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">90</span>)<span class="comment">#使用内置函数</span></span><br><span class="line">t=(<span class="number">10</span>,)<span class="comment">#自包含一个元素的元组需要使用逗号和小括号</span></span><br><span class="line">t=<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">90</span><span class="comment">#小括号可以省略</span></span><br></pre></td></tr></table></figure><h1 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">tuple</span>:</span><br><span class="line">    do</span><br></pre></td></tr></table></figure><h1 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h1><ul><li>内置数据结构</li><li>可变数据类型</li><li>没有value的字典</li></ul><h1 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="string">&#x27;python&#x27;</span>,<span class="number">1</span>&#125;<span class="comment">#直接创建</span></span><br><span class="line">s2=<span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">6</span>))<span class="comment">#内置函数创建，set()可以将所有类型都转为集合且会去重</span></span><br><span class="line">s3=<span class="built_in">set</span>()<span class="comment">#定义空集合</span></span><br></pre></td></tr></table></figure><h1 id="集合的增删改查"><a href="#集合的增删改查" class="headerlink" title="集合的增删改查"></a>集合的增删改查</h1><ul><li>元素判断<ul><li>in 或not in </li></ul></li><li>集合增添元素<ul><li>add()：添加一个元素</li><li>update()：添加至少一个元素</li></ul></li><li>集合元素的删除<ul><li>remove()：删除一个指定元素，元素不存在会抛出异常KeyError</li><li>discard()：删除一个指定元素，元素不存在不会抛出异常</li><li>pop()：一次只删除一个任意元素</li><li>clear()：清空集合</li></ul></li></ul><h1 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1==s2<span class="comment">#判断两个集合是否相等</span></span><br><span class="line">s1!=s2</span><br><span class="line">s2.issubset(s1)<span class="comment">#一个集合是否是另一个集合的子集,s2是否是s1的子集</span></span><br><span class="line">s1.issuper(s2)<span class="comment">#一个集合是否是另一个集合的超集,s1是否是s2的超集</span></span><br><span class="line">s1.isdisjoint(s2)<span class="comment">#两个集合是否没有交集</span></span><br></pre></td></tr></table></figure><h1 id="集合的数学操作"><a href="#集合的数学操作" class="headerlink" title="集合的数学操作"></a>集合的数学操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1.intersection(s2)<span class="comment">#s1和s2的交集</span></span><br><span class="line">s1&amp;s2 </span><br><span class="line">s1.union(s2)<span class="comment">#并集</span></span><br><span class="line">s1|S2</span><br><span class="line">s1.difference(s2)<span class="comment">#差集</span></span><br><span class="line">s1-s2</span><br><span class="line">s1.symmetric_difference(s2)<span class="comment">#对称差集</span></span><br><span class="line">s1^s2</span><br></pre></td></tr></table></figure><h1 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;集合元素 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>情绪管理</title>
      <link href="/posts/ecf445c8.html"/>
      <url>/posts/ecf445c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="情绪对我们的影响"><a href="#情绪对我们的影响" class="headerlink" title="情绪对我们的影响"></a>情绪对我们的影响</h1><ul><li>注意力</li><li>决策</li><li>人际关系</li><li>身心健康</li><li>创造力<h1 id="情绪标尺"><a href="#情绪标尺" class="headerlink" title="情绪标尺"></a>情绪标尺</h1></li><li>图片<br><img src="https://rs1.huanqiucdn.cn/dp/api/images/imageDir/241c262aefc9f4c24d6f4f0e8cca726f.png"><ol><li>X为心情</li><li>Y为能量<h1 id="健康情绪管理"><a href="#健康情绪管理" class="headerlink" title="健康情绪管理"></a>健康情绪管理</h1></li></ol></li><li>行为策略<ul><li>深呼吸</li><li>与朋友交流</li></ul></li><li>思维策略<ul><li>对自己说一些积极的话</li><li>试图重新构建一个情境去从一个新的角度去看待问题<h1 id="呼吸是一个好方法"><a href="#呼吸是一个好方法" class="headerlink" title="呼吸是一个好方法"></a>呼吸是一个好方法</h1><img src="https://pic1.zhimg.com/v2-aefc6ed0075a04cdb7e72af4c2ff1b92_1200x500.jpg"><h1 id="思维策略举例"><a href="#思维策略举例" class="headerlink" title="思维策略举例"></a>思维策略举例</h1></li></ul></li></ul><ol><li>积极的自我对话<br><img src="https://bpic.588ku.com/element_pic/20/06/30/c8bf2759cf216208a52f9ec0f39d51c0.jpg"></li><li>积极重塑<br> 将正在经历的消极情绪转变角度，把它变成一个积极的情绪。<br> 例子：当你遇到失败时，你不应该去悔恨难受，而因该告诉自己学到了什么能够帮助自己下一次做的更好。</li><li>正念</li></ol><ul><li>将注意力集中在当下：当思绪远离当下，可以专注当下的呼吸。</li><li>开放的不评判意识：通过观察整个整体的原样，不试图去改变它，整体原样包括现在正经历的事情以及自己对它们的看法。<h1 id="定义情感学家"><a href="#定义情感学家" class="headerlink" title="定义情感学家"></a>定义情感学家</h1></li><li>行为不等于情感</li><li>找到情感来源需要行为背后的故事<h1 id="成为文化回应性情感的障碍"><a href="#成为文化回应性情感的障碍" class="headerlink" title="成为文化回应性情感的障碍"></a>成为文化回应性情感的障碍</h1></li><li>我们看到别人的情绪基于我们自己的经历</li><li>假设在任何领域都可能是有害的</li><li>当我们解读与我们不相同的人时，一般结果都是错误的</li><li>种族观念对回应情感影响巨大</li><li>归因会影响情绪<h1 id="消除回应性障碍的方法"><a href="#消除回应性障碍的方法" class="headerlink" title="消除回应性障碍的方法"></a>消除回应性障碍的方法</h1></li><li>通过自身努力来提高技能来提高感知情绪的能力</li><li>学习更多的文化</li><li>更好的了解别人，尤其是与我们背景不同的人<h1 id="善良者的盲点隐藏偏见"><a href="#善良者的盲点隐藏偏见" class="headerlink" title="善良者的盲点隐藏偏见"></a>善良者的盲点隐藏偏见</h1></li><li>身边人会潜意识的影响我们大脑对事物的态度和观念<h1 id="理解他人的情绪"><a href="#理解他人的情绪" class="headerlink" title="理解他人的情绪"></a>理解他人的情绪</h1></li><li>与我们不同的人越多，我们就越需要精神上的努力停顿，因为感觉比思想传播的更快</li><li>重要的是打断大脑无意识的情绪反应，调动更先进的、符合逻辑的大脑区域<h1 id="那些差异很难弥合？"><a href="#那些差异很难弥合？" class="headerlink" title="那些差异很难弥合？"></a>那些差异很难弥合？</h1></li><li>年龄、气质、个性、性别、文化、权力<h1 id="情绪共调节"><a href="#情绪共调节" class="headerlink" title="情绪共调节"></a>情绪共调节</h1></li><li>一个人的行为或情绪会受到别人的行为或情绪的影响</li><li>对于孩子来说，只要有一个大人能让他感到安全，那么他们一起就能更好的处理压力<h1 id="管理情绪"><a href="#管理情绪" class="headerlink" title="管理情绪"></a>管理情绪</h1></li><li>搞个小咒语</li><li>要想搞懂别人的感受，就要停止你自己对他感受的假设<h1 id="情绪一致性"><a href="#情绪一致性" class="headerlink" title="情绪一致性"></a>情绪一致性</h1></li><li>黄色：创造力、新想法</li><li>红色：对抗性、竞争性</li><li>蓝色：同理心、敏感、分析事件3</li><li>绿色：自我反省和建立共识、舒适、放松、平静<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li></ul><ol><li>情绪标尺对我的作用还是很大的，通过情绪一致性可以将情绪标尺的作用发挥到最大。</li><li>情绪管理的方法，思维和行为。</li><li>人脑应对压力的方式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情绪管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/posts/607d6c62.html"/>
      <url>/posts/607d6c62.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="获取本地仓库"><a href="#获取本地仓库" class="headerlink" title="获取本地仓库"></a>获取本地仓库</h2><ul><li>git init:初始化本地仓库<h2 id="基础操作命令"><a href="#基础操作命令" class="headerlink" title="基础操作命令"></a>基础操作命令</h2></li><li>原理图<br><img src="https://img-blog.csdnimg.cn/0ccf1153753f40d3976edc1b1a024b25.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASkFWQeaIkOelng==,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>git add files/.：将目标文件添加到暂存区</li><li>git commit -m “描述信息”：将暂存区的文件都加入到本地仓库</li><li>git log：查看日志信息</li><li>git reset –hard commitID：版本回滚</li><li>git reflod：记录全部日志，解决reset出现的问题。</li><li>touch .gitignore：添加忽略文件列表</li><li>git status：查看文件状态<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2></li><li>git branch:查看分支</li><li>git branch branchname：创建新分支</li><li>git checkout branchname:切换分支</li><li>git checkout -b branchname:创建并且切换分支</li><li>git merge branchname:将目标分支合并到当前分支</li><li>git branch -d/D branchname:将目标分支删除，D为强制删除。</li><li>合并冲突的解决：自行修改</li><li>开发过程流程图<br><img src="https://img-blog.csdnimg.cn/aba3e06d232249778fe440e92e6e78bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASkFWQeaIkOelng==,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h2></li><li>ssh-keygen -t rsa:获取ssh密钥</li><li>git remote origin 仓库链接：添加远程仓库</li><li>git remote:查看当前的远程仓库</li><li>git push origin master:将本地mater上传到云端</li><li>git branch -vv :查看本地分支与远程分支之间的关系</li><li>git push –set-upstream:将本地文件推送到远端并建立推送关系</li><li>git clone:克隆仓库</li><li>git fetch:抓取</li><li>git pull:拉取</li><li>冲突的解决<br><img src="https://img-blog.csdnimg.cn/c07f917ca6384c87921b33a12aa7729a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASkFWQeaIkOelng==,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新</title>
      <link href="/posts/41503.html"/>
      <url>/posts/41503.html</url>
      
        <content type="html"><![CDATA[<h1 id="分类磁贴配置"><a href="#分类磁贴配置" class="headerlink" title="分类磁贴配置"></a>分类磁贴配置</h1><h1 id="导航栏居中"><a href="#导航栏居中" class="headerlink" title="导航栏居中"></a>导航栏居中</h1><h1 id="双栏显示更新"><a href="#双栏显示更新" class="headerlink" title="双栏显示更新"></a>双栏显示更新</h1><h1 id="背景图片的更换"><a href="#背景图片的更换" class="headerlink" title="背景图片的更换"></a>背景图片的更换</h1><ol><li>找到想要更换的背景图片</li><li>在配置文件中引入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Website Background (設置網站背景)</span><br><span class="line"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="line"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line">background: 注意要使用url()函数。</span><br></pre></td></tr></table></figure>我使用的背景图地址为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ts1.cn.mm.bing.net/th/id/R-C.1b6c4fbca60a59b730f9c4df29ae55ff?rik=at%2bhpV0O8JNl5w&amp;riu=http%3a%2f%2fwww.kutoo8.com%2fupload%2fthumb%2f156703%2ff66bb081a954eabc8debb886150892bb_1920x1080.jpg&amp;ehk=aSr%2bIxCj7oWwKGwrzQduV%2fIWWZ1BUEngrmmXfTEaf%2b4%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0</span><br></pre></td></tr></table></figure><img src="https://ts1.cn.mm.bing.net/th/id/R-C.1b6c4fbca60a59b730f9c4df29ae55ff?rik=at+hpV0O8JNl5w&riu=http://www.kutoo8.com/upload/thumb/156703/f66bb081a954eabc8debb886150892bb_1920x1080.jpg&ehk=aSr+IxCj7oWwKGwrzQduV/IWWZ1BUEngrmmXfTEaf+4=&risl=&pid=ImgRaw&r="><h1 id="网站自定义css"><a href="#网站自定义css" class="headerlink" title="网站自定义css"></a>网站自定义css</h1></li><li>找到想要的css样式</li><li>在配置文件中引入相关的css<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head:</span><br><span class="line"><span class="bullet">     -</span> <span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/custom.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="头像的更换"><a href="#头像的更换" class="headerlink" title="头像的更换"></a>头像的更换</h1></li><li>找到自己想要替换的图片<ul><li>我的头像图片地址为：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=358681858,1462018372&amp;fm=175&amp;app=25&amp;f=JPEG?w=640&amp;h=1137&amp;s=EDA2B156D8B373B5A02080C3030030E3</span><br></pre></td></tr></table></figure><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=358681858,1462018372&fm=175&app=25&f=JPEG?w=640&h=1137&s=EDA2B156D8B373B5A02080C3030030E3"></li></ul></li><li>更换配置文件里相关链接<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> avatar:</span><br><span class="line">img: https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=358681858,1462018372&amp;fm=175&amp;app=25&amp;f=JPEG?w=640&amp;h=1137&amp;s=EDA2B156D8B373B5A02080C3030030E3</span><br><span class="line">effect: false</span><br></pre></td></tr></table></figure><h1 id="电子钟的添加"><a href="#电子钟的添加" class="headerlink" title="电子钟的添加"></a>电子钟的添加</h1></li><li>下载电子钟插件<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock-anzhiyu --save</span><br></pre></td></tr></table></figure></li><li>在配置文件中添加<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">electric<span class="emphasis">_clock:</span></span><br><span class="line"><span class="emphasis">  enable: true # 开关</span></span><br><span class="line"><span class="emphasis">  priority: 5 #过滤器优先权</span></span><br><span class="line"><span class="emphasis">  enable_</span>page: all # 应用页面</span><br><span class="line">  exclude:</span><br><span class="line"><span class="code">    # - /posts/</span></span><br><span class="line"><span class="code">    # - /about/</span></span><br><span class="line"><span class="code">  layout: # 挂载容器类型</span></span><br><span class="line"><span class="code">    type: class</span></span><br><span class="line"><span class="code">    name: sticky_layout</span></span><br><span class="line"><span class="code">    index: 0</span></span><br><span class="line"><span class="code">  loading: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu@1.1.6/lib/loading.gif #加载动画自定义</span></span><br><span class="line"><span class="code">  clock_css: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu@1.1.6/lib/clock.min.css</span></span><br><span class="line"><span class="code">  clock_js: https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu@1.1.6/lib/clock.min.js</span></span><br><span class="line"><span class="code">  ip_api: https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0</span></span><br><span class="line"><span class="code">  qweather_key: ac4fb222ec7f46a3ae38176795c81ec1 # 和风天气key</span></span><br><span class="line"><span class="code">  gaud_map_key: 9fc7a90fd9913dcf11c02ba7a4abc8ee # 高得地图web服务key</span></span><br><span class="line"><span class="code">  default_rectangle: false # 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气</span></span><br><span class="line"><span class="code">  rectangle: 112.6534116,27.96920845 # 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>需要注意：default_rectangle的值会影响到你所看到的结果。<h1 id="全局搜索的实现"><a href="#全局搜索的实现" class="headerlink" title="全局搜索的实现"></a>全局搜索的实现</h1></li></ul><ol><li>安装相关插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li>在配置文件中添加相关信息<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line"><span class="code">    path: search.xml</span></span><br><span class="line"><span class="code">    field: post</span></span><br><span class="line"><span class="code">    content: true</span></span><br></pre></td></tr></table></figure><h1 id="live2D的安装"><a href="#live2D的安装" class="headerlink" title="live2D的安装"></a>live2D的安装</h1></li><li>下载相关插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li>下载想要的模型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-wanko</span><br></pre></td></tr></table></figure><h1 id="避免live2d等的重复加载"><a href="#避免live2d等的重复加载" class="headerlink" title="避免live2d等的重复加载"></a>避免live2d等的重复加载</h1></li></ol><ul><li>将配置文件中的Pjax选项改为启用</li></ul><h1 id="添加指针样式"><a href="#添加指针样式" class="headerlink" title="添加指针样式"></a>添加指针样式</h1><ul><li>参考教程:<a href="https://cnhuazhu.gitee.io/2021/07/05/Hexo%E9%AD%94%E6%94%B9/Hexo%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/">花猪的blog之鼠标指针修改</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有社交软件的生活</title>
      <link href="/posts/99481bfb.html"/>
      <url>/posts/99481bfb.html</url>
      
        <content type="html"><![CDATA[<ul><li>You probably don’t realize that right now,you’re looking at something quite rare. Because I am a millennial computer scientist bool author standing on a TEDX stage,and yet,I’ve never had a social media account.How this happended was actually somewhat random.Social media first came into my radar when I was at college. my sophomore year of college,this is when Facebook arrived at our campus.And at that time,which was right after the first doctom bust,I had had a dorm room business,I’d had to shut it down in the bust,and then,suddenly,this other kid from Harvard,namede Mark,had this product called Facebook,and people being excited about it. So in sort of a fit of somewhat immature professional jealousy,I said,”I’m not going to use this thing, I won’t help this kid’s business,whatever’s going to amount to”.As I go along my life,I look up not long later,and I see everyone I know is hooked on this thing.And from the clarity you can get when you have some objectivity,some perspective on it,I realize this seems a little bit dangerous. So I’ve never signed up,I’ve never had a social media account since. So I’m here for two reasons,I want to deliver two messages.</li><li>The first message I want to deliver is that even though I’ve never had a social media account,I’m ok, you don’t have to worry. It turns out I still have friends,I still know what’s going on in the world as a computer scientist.I still collaborate with people all around the world,I’m still exposed serendipitously to instersting ideas,and I rarely describe myself as lacking entertainment options. So I’ve been ok,but I’d go even farther and say not only I am ok without social media,but I’m actually better off.I think I’m happier,I think I find more sustainability in my life,and I’ve been more successful professionally,because I don’t use social media.</li><li>So my second goal here on stage is try to cinvice more of you to believe the same thing.Let’s see if I could actually convice more of you that you too would be better off if you quit social media. So,if the theme of this TEDx event is “Future Tense”,I guess,in other words,this would be my vision of the future,would be one in which fewer people actually use social media.That’s a big claim,I think I need to back it up. So I thought,what I would do is take the three most common objections I hear when I suggest to people that they quit social media,and then for each of these objections, I’ll try to defuse the hype and see if I can actually push in some more reality.<ol><li>This is the first common objection I hear,That is not a hermit,that’s actually a hipster web developer down from 8th street,I’m not sure. Hipster or hermit? Sometimes it’s hard to tell. The first objection goes ad follows,”Cal, social media is one of the fundamental technologies of the 21th century. To reject social media would be an act of extreme bloodism. It would be like riding to woek on a horse or using a rotary phone. I can’t take such a big stance in my life.” My reaction to that objection is I think that is nonsense. Social media is not a foudamental technology. It leverages some fundamental technologies, but it’s better understood as this. Which is to say, it’s a source of entertainment, it’s an entertainment product. The way that technologist Jaron Lanier puts it is that these companies offer you shiny treats in exchange for minutes of your attention and bites of your personal data,which can then be packaged up and sold. So to say that you don’t use social media should not be a large social stance, it’s just rejecting one form of entertainment for others. There should be no more controversial than saying. “I don’t like newspapers, I like to get my news from magazines,” or “I perfer to watch cable series as opposed to network television series.” It’s not a majar political or social stance to say you don’t use this product. My use of the slot machine image up here also is not accidental because if you look a little bit closer at these technologies, it’s not just that they’re a source of entertainment, but they’re somewhat unsavory source of entertainment. We now know that many of the major social media companies hire individuals called attention  engineers, who borrow principles from Las Vegas casino gambing among other places, to try to make these products as addictive as possible. That is the desired use case of these products, is that you use it in an addictive fashion because that maxmizes the profit that can be extracted from you attention and data. So it’s not a fundamental technology, it’s just a source of entertainment, one among many, and it’s somewhat unsavory if you look a little bit closer.</li><li>Here’s the second objecton I hear when I suggest that people quit social media. The objection goes as follows, “Cal, I can’t quit social media, because it is vital to my success in the 21st century economy. If I do not have a well-cultivated social media brand, people won’t know who I am, people won’t be able to find me, opportunities won’t come my way, and I will effectively disappear from the economy.” Again my reaction is once again, this objection also is nonsense. I recently published this book that draws on mutiple different strands of evidence to make the point that, in a competitive 21st century economy, what the market values is the ability to produce things that are rare and valuable. If you produce something that’s rare and valuable, the market will value that. What the market dismisses, for the most part, are activities that are easy to replicate and produce a small amount of value. Well, social media use is the epitome of an easy to replicate activity that doesn’t produce a lot of value, it’s something that any six-year-old with a smartphone can do. By definition, the market is not going to give a lot of value to those behaviors. It’s instead going to reward the deep, concentrated work required to build real skills and to apply those skills to produce things like a craftsman that are rare and that are valuable. To put it another way, if you can write an elegant algorithm, if you can write a legal brief that can change a case, if you can write a thousand words of prose that’s going to fixate a reader right to the end, if you can look at a sea of ambiguous data and apply statistics, and pull out insights that could transform a business strategy, if you can do these type of activities which require deep work that produce outcomes that are rare and valuable, people will find you. You will be able to write your won ticket, and build the foundation of a meaningful and successful professional life, regardless of how many Instagram followers you have.</li><li>This is the third common objection I hear when I suggest to people that they quit social media, in some sense, I think it might be one of the most important, This objection goes as follows, “Cal, maybe I aggree, maybe you’re right, it’s not a foundamental technology, mybe using social media is not at the core of my professional success. But you know what? It’s harmless, I have some fun on it, weird ,Twitter is funny, I don’t use it that much, I’m a first adopter, it’s kind of insteresting to try it out, and maybe I might miss out something if I don’t use it. What is the harm?” Again, I look back and I say, this objection also is nonsense, In this case, what it misses is what I think is a very important reality that we need to talk about more frankly, which is that social media brings us with it’s mulitiple, well-documented, and significant harms. We actually have to confront these harms head-on when trying to make decisions about whether or not embrace this technology ant let it into our life. One of these harms that we know this technology brings has to do with your professional success. I just argued before that thr ability to focus intensely to produce things that are rare and valuable. to hone skills the market place value on, this is what will matter in our economy. But right before that ,I argued that social media tools are designed to be addictive, the actual designed desired use case of these tools is that  fragment your attention as much as possible throughout your waking hours, that’s how these tools are designed to use. We have a growing amount of research which tells us that if you spend large portions of your day in a state of fragmented attention, the large portions of your day will constantly break up your attention, “ot take a quick glance, to just check, let me quickly look at instagram”, and this can permanently reduce your capacity for concentation. In other words, you could permanently reduce your capacity to do exactly the type of deep effort that we’re finding to be more and more necessary in an increasingly competitive ecnomy. So social media use is not harmless, it can actually have a significant negative impact on your ability to thrive in the economy. I’m especially worried about this when we look at the younger generation, which is the most saturated in this technology. If you lose your ability to sustain concentration, you are going to become less and less relevant to this economy. There is also psychological harms that are well documented taht social media brings, that we do need to address. We know from the research literature that the more you use social media, the more likely you are to feel lonely or isolated. We know that the constant exposure to your friends carefully curated, positive portrayals of their life can leave you to feel inadequate and can increase rates of depression. And something I think we’re going to be hearing more about in the near future is that there’s a fundamental mismatch between the way our brains are wired and this behaviors of exposing yourself to stimul with intermittent rewards throughout all of your waking hours, it’s one thing to spend a couple of hours at a slot machine in Las Vegas, but if you bring one with you, and you pull that handle all day long from when you wake up to when you go to bed, we’re not wired from it, it short-circuits the brain and we are starting to find it has actual cognitive consequences, one of them being this sort of pervasive background hum of anxiety. The canary in the coal mine for this issue is actually college capuses, If you talk to mental health experts on college campuses, they’ll tell you along the rise of ubiquitous smartphone use and social media use among the students on the campus came an explosion of anxiety-related disorders on those campuses, that’s the canary in the coal mine, this type of behaviors is a mismatch for our brain wiring and can make you feek miserable. So there’s real cost to social media use, which means when you’re trying to decide “Should I use this or not ?” saying it’s harmless is not enough. You actually have to identify a significantly positive, clear benefit that can outweigh these potential completely non-trivial harms. People often ask “ok, but what is life like without social media ?” That can actually be a little bit scary to think about. According to people who went through this process, there can be a few difficult weeks, it actually is like a true detox process, the first two weeks can be uncomfortable, you feel a little bit anxious, you feel like you are missing a limb, but after that, things settle down, and actually, life after social media can be quite positive. There is two things I can report back from the world of no social media use:<ol><li>First, it can be quite productive, I am a professor at a research institution, I’ve written five books, I rarely work past 5 pm on a weekday, part of the way I’m trying to able to pull that off is because it turns out, if you treat your attention with respect, so you don’t fragment it, you allow it to stay whole, you preserve your concentration when it comes time to work, you can do one thing after anotherm and do it with intensity, and intensity can be traded for time, it’s surprising how much you can get done in a eight-hour day if you’re able to give each thing intense concentration after another. </li><li>Something else I can report back from life without social media is that outside of work, things can be quite peaceful, so I ofen joke I’d be very comfortable being a 1930s farmer, because if you look at my leisure time, I read newspaper while the sun comes up, I listen to baseball on the radio, I honest-to-god sit in a leather chair and read hardcover books at night after my kids go to bed, it sounds old-fashioned, but they were onto something back then, it is actually a restorative, peaceful way to actually spend your time out of work, you don’t have the constant hum of stimuli and the background hum of anxiety that comes along with that.</li></ol></li></ol></li><li>So life without social media is really not so bad, if you pull together these threads, you see my full argument is that not everyone, but certainly much more people than right now much more people should not be using social media. That’s because wwe can first, to summarize, discard with the main concerns that it’s a fundamental technology you have to use, nonsense, it’s a slot machine in your phone. We can discard with this notion that you don’t get a job without it, nonsense, anything a six-year-old with a smartphone can do is not going to be what the market rewards. And then I emphasized the point that there’s real harms with it, it is not just harmless, you really would have a significant benefit before you would say this trade-off is worth it. Finally I noted that life without social media, there is real positives associated with it. So I’m hoping that when many of you actually go through this same calculus, you’ll at least consider the perspective I’m making right now, which is many more people would be much better off if they didn’t use this technology. Some of you might disagree, some of you might have scathing but accurate critiques of me and my points, of course, I welcome all negative feedback, I just ask that you direct your comment towards Twitter. Thank you!</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理第一章</title>
      <link href="/posts/46fb21b5.html"/>
      <url>/posts/46fb21b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h1><h2 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机?"></a>什么是计算机?</h2><ul><li>计算机=硬件+软件</li><li>计算机性能的好坏，取决于软、硬件功能的总和。<h2 id="硬件的发展"><a href="#硬件的发展" class="headerlink" title="硬件的发展"></a>硬件的发展</h2></li></ul><ol><li>电子管时代<ul><li>顾问：冯诺依曼</li><li>输入输出：纸带</li><li>bug：小虫子</li></ul></li><li>晶体管时代<ul><li>贝尔发现晶体管</li><li>操作系统出现</li><li>程序设计语言出现</li></ul></li><li>中小规模集成电路时代<ul><li>用于科学计算</li><li>高级语言快速发展</li><li>分时操作系统出现</li></ul></li><li>大规模、超大规模集成电路时代<ul><li>各种操作系统</li><li>个人电脑</li><li>机器字长：计算机一次整数运算所能处理的二进制位数。</li><li>微处理器的发展<ul><li>摩尔定律：集成电路上可容纳的晶体管数量，约每隔18个月就会增加一倍，整体性能也将提升一倍。</li><li>微型计算机的发展以为处理器技术为标志。<h2 id="软件的发展"><a href="#软件的发展" class="headerlink" title="软件的发展"></a>软件的发展</h2>略。<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><img src="/posts/46fb21b5.htm/jzswdt1.1.png"><h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><h2 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h2><img src="/posts/46fb21b5.htm/jzswdt1.2.png"><h2 id="冯诺伊曼体系"><a href="#冯诺伊曼体系" class="headerlink" title="冯诺伊曼体系"></a>冯诺伊曼体系</h2></li></ul></li></ul></li></ol><ul><li>结构图<br><img src="/posts/46fb21b5.htm/jzfnymjgt.png"></li><li>特点<ol><li>计算机由五大部件组成。</li><li>指令和数据以同等地位存于存储器，可按地址寻访。</li><li>指令和数据用二进制表示。</li><li>存储程序。</li><li>以运算器为中心。<h2 id="现代计算机结构"><a href="#现代计算机结构" class="headerlink" title="现代计算机结构"></a>现代计算机结构</h2></li></ol></li><li>结构图<br><img src="/posts/46fb21b5.htm/jzxdjsjjgt.png"></li><li>特点<ul><li>以存储器为中心。<h1 id="认识各个硬件的基本组成"><a href="#认识各个硬件的基本组成" class="headerlink" title="认识各个硬件的基本组成"></a>认识各个硬件的基本组成</h1></li></ul></li><li>思维导图<br><img src="/posts/46fb21b5.htm/jzswdt1.22.png"><h2 id="主存储器的基本组成"><a href="#主存储器的基本组成" class="headerlink" title="主存储器的基本组成"></a>主存储器的基本组成</h2></li><li>结构图<br><img src="/posts/46fb21b5.htm/jzzccqjgt.png"></li><li>存储单元：每个存储单元存放一串二进制代码。</li><li>存储字：存储单元中二进制代码的额组合。</li><li>存储字长：存储单元中二进制的位数。</li><li>存储元：存储二进制的电子原件。<h2 id="运算器的基本组成"><a href="#运算器的基本组成" class="headerlink" title="运算器的基本组成"></a>运算器的基本组成</h2></li><li>结构图<br><img src="https://img-blog.csdnimg.cn/img_convert/8c5124abda8b51f5383bb39c0e2fc798.png"><h2 id="控制器的基本组成"><a href="#控制器的基本组成" class="headerlink" title="控制器的基本组成"></a>控制器的基本组成</h2></li><li>结构图<br><img src="https://img-blog.csdnimg.cn/img_convert/af03fabce192609ca3ed350b03be6122.png"><h2 id="计算机的工作过程"><a href="#计算机的工作过程" class="headerlink" title="计算机的工作过程"></a>计算机的工作过程</h2></li><li>程序被编译成二进制存储在主存中<br><img src="https://img-blog.csdnimg.cn/img_convert/c113fde7332d03c5c6c7d400d4d79bf9.png"></li><li>（MAR）：表示MAR里边的值为0</li><li>M(MAR) ：主存储器所指向的存储单元里边的值</li><li>OP（IR）：取操作码</li><li>Ad（IR）：取地址码</li><li>程序执行流程<ul><li><img src="https://img-blog.csdnimg.cn/img_convert/0d9c2d68262a80f4fa80595623d62d5d.png"></li><li><img src="https://img-blog.csdnimg.cn/img_convert/a1673e01ad3e109d5f03afaa038b208e.png"><h2 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h2></li></ul></li><li>思维导图<br><img src="/posts/46fb21b5.htm/jzswdt1.23.png"></li><li>层次结构图<br><img src="https://img-blog.csdnimg.cn/img_convert/c05bd84fd952372bdbadceb6c90742ed.png"></li><li>三种级别的语言<br><img src="https://img-blog.csdnimg.cn/img_convert/db91312669c9c643d5793cbb6c39ad96.png"><ul><li>编译程序：将高级语言编写的源程序全部语句一次全部翻译成机器语言程序，而后再执行机器语言程序（只需翻译一次)</li><li>解释程序：将源程序的一条语句翻译成对应于机器语言的语句，并立即执行。紧接着再翻译下一句(每次执行都要翻译)<h2 id="计算机的性能指标"><a href="#计算机的性能指标" class="headerlink" title="计算机的性能指标"></a>计算机的性能指标</h2></li></ul></li><li>思维导图<br><img src="/posts/46fb21b5.htm/jzswdt1.3.png"></li><li>主存储器<ol><li>总容量：存储单元个数*存储字长。</li></ol></li><li>CPU<ol><li>CPU主频：CPU内数字脉冲信号振荡的频率。<br><img src="https://img-blog.csdnimg.cn/img_convert/35961aa013861c4f3dfc295df302bfb9.png"></li><li>CPI：执行一条指令所需的时钟周期。</li><li>IPS：每秒钟可以执行多少条指令。</li><li>FLOATS：每秒可以执行多少次浮点运算。<br><img src="https://img-blog.csdnimg.cn/img_convert/5a609bde1d19810e6f9a1a1b3c301d57.png"></li></ol></li><li>系统整体的性能指标<br><img src="https://img-blog.csdnimg.cn/img_convert/f9c41c015f846bc3a03799885986f825.png"> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第一章</title>
      <link href="/posts/a3cf1aa6.html"/>
      <url>/posts/a3cf1aa6.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>思维导图<br><img src="/posts/a3cf1aa6.htm/sjjgswdt1.1.png"></li><li>数据结构学什么？<ol><li>如何用程序代码把现实世界的问题<font color="Red">信息化</font>。</li><li>如何用计算机高效的处理这些信息从而<font color="Red">创造价值</font>。</li></ol></li><li>基本概念<br><img src="/posts/a3cf1aa6.htm/sjjgjbgn.png"></li><li>数据：是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。</li><li>数据元素：数据的基本单位，一个数据元素可由若干数据项组成。</li><li>数据结构：指互相之间存在着一种或多种<font color="Red">特定关系</font>的数据元素的集合，包括逻辑结构，存储结构和对数据的运算。（数据元素都不是孤立存在的）</li><li>数据对象：<font color="Red">性质相同</font>的数据元素的集合，是数据的一个子集。</li><li>三要素<ul><li>逻辑结构</li><li>物理结构</li><li>相关运算</li></ul></li><li>逻辑结构<ul><li>集合：结构中的数据元素除了<font color="Red">同属于一种类型</font>外，别无其它关系。</li><li>线性：结构中的数据元素之间存在<font color="Red">一对一</font>的关系。</li><li>树形：结构中的数据元素之间存在<font color="Red">一对多</font>的关系。</li><li>图状：结构中的数据元素之间存在<font color="Red">多对多</font>的关系</li></ul></li><li>物理结构<ul><li>顺序：数据元素顺序存放，每个存储结点只含一个元素，<font color="Red">存储位置反映数据元素间的逻辑关系</font>，存储密度大。有些操作（如插入、删除）效率较差。</li><li>链式：每个存储结点除包含数据元素信息外还包含一组（至少一个）指针，<font color="Red">指针反映数据元素间的逻辑关系</font>。这种方式不要求存储空间连续，便于动态操作（如插入、删除等），但存储空间开销大（用于指针），且不能折半查找。</li><li>索引：除数据元素存储在一组地址连续的内存空间外，还需<font color="Red">建立一个索引表</font>，索引表中索引指示存储结点的存储位置（下标）或存储区间端点（下标）。</li><li>散列：通过散列函数和解决冲突的方法，将关键字散列在连续的有限的地址空间内，并<font color="Red">将散列函数的值解释成关键字所在元素的存储地址</font>。其特点是存取速度快，只能按关键字随机存取，不能顺序存取，也不能折半存取。</li></ul></li><li>数据的运算<ul><li>定义针对<font color="Red">逻辑结构</font>。</li><li>实现针对<font color="Red">物理结构</font>。</li></ul></li><li>数据类型:一个<font color="Red">值的集合</font>和定义在此集合上的<font color="Red">一组操作</font>的总称。<ul><li>原子类型：其值不可再分。</li><li>结构类型：其值可被分解成若干分量。</li></ul></li><li>抽象数据类型：抽象数据组织及与之相关的操作。<ul><li>用数学化的语言定义数据的逻辑结构，定义运算，<font color="Red">与具体的实现无关</font>。<h2 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h2></li></ul></li><li>思维导图<br><img src="/posts/a3cf1aa6.htm/sjjgswtd1.2.png"></li><li>程序=数据结构+算法</li><li>算法的特性<ul><li>有穷性：一个算法必须在执行有穷步后停下来，且每一步都可在有限时间内完成，注意，算法必须有穷的，而程序可以是无穷的。</li><li>确定性：算法中的每条指令都必须有确切的含义，对于相同的输入必须有相同的输出。</li><li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li><li>输入：0或多。</li><li>输出：1或多。</li></ul></li><li>好算法的特质<ol><li>正确性：算法应能够准确地解决求解问题。</li><li>可读性：算法应具有良好地可读性，以帮助人们理解。</li><li>健壮性：输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙地输出结果。</li><li>高效率和低存储需求。<h2 id="算法效率地度量"><a href="#算法效率地度量" class="headerlink" title="算法效率地度量"></a>算法效率地度量</h2></li></ol></li><li>时间复杂度：评估算法地时间开销。<ul><li>思维导图<br><img src="/posts/a3cf1aa6.htm/sjjgswdt1.22.png"></li><li>计算规则<ul><li>加法规则：多项相加，只保留阶数最高的项，且系数变为1.</li><li>乘法规则：多项相乘，全保留。</li><li>判断常见时间复杂度大小的方法：常对幂指阶。</li></ul></li><li>如何计算<ol><li>顺序执行的代码只会影响常数项可以忽略。</li><li>只需挑循环中的一个基本操作分析它的执行次数与n的关系即可。</li><li>如果有多层嵌套循环，只需要关注最深层循环循环了几次。</li></ol></li><li>注意：一般只考虑最坏时间复杂度和平均时间复杂度。</li></ul></li><li>空间复杂度：空间开销与问题规模n之间的关系。<ul><li>思维导图<br><img src="/posts/a3cf1aa6.htm/sjjgswdt1.23.png"></li><li>原地工作：算法所需内存空间为常量。</li><li>计算规则：同时间复杂度。</li><li>计算方法<ol><li>只需关注存储空间大小与问题规模相关的变量。</li><li>对于递归调用的函数，空间复杂度一般为递归调用的深度。</li></ol></li></ul></li><li>注意：算法的性能问题只有在 n 很大时才会暴露出来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第一章</title>
      <link href="/posts/6bac0ed5.html"/>
      <url>/posts/6bac0ed5.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念、组成、功能和分类"><a href="#概念、组成、功能和分类" class="headerlink" title="概念、组成、功能和分类"></a>概念、组成、功能和分类</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>计算机网络：是一个将分散的。具有独立功能的<font color="Red">计算机系统</font>，通过<font color="Red">通信设备</font>和<font color="Red">线路</font>连接起来，由功能完善的<font color="Red">软件</font>实现<font color="Green">资源共享</font>和<font color="Green">信息传递</font>的系统。<br>简单点说，计算机网络是<font color="Red">互联</font>的，<font color="Red">自治</font>的计算机集合。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>数据通信（连通性）</li><li>资源共享</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2></li></ol><ul><li>组成部分：硬件、软件和协议。</li><li>工作方式<ul><li>边缘部分：C/S,P2P</li><li>核心部分：为边缘部分服务</li></ul></li><li>功能组成<ul><li>通信子网：数据通信</li><li>资源子网：资源共享、数据处理<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><img src="https://img-blog.csdnimg.cn/img_convert/a1dc9018c4db230912a4fc0f8b95af30.png"><h1 id="标准化工作及相关组织"><a href="#标准化工作及相关组织" class="headerlink" title="标准化工作及相关组织"></a>标准化工作及相关组织</h1><img src="https://uploadfile.bizhizu.cn/up/24/e9/64/24e964081e1d9326be3b5bec47591211.jpg"><br>略。<h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2></li></ul>速率即数据率或称数据传输率或比特率（bit）。即将数据从<font color="Red">主机</font>传到<font color="Red">信道</font>上的速度。一般位简写为小写字母“b”，字节简写为大写字母“B”。<ul><li>换算关系</li></ul><img src="https://img-blog.csdnimg.cn/img_convert/dc9279abaa79c0201162c3b4404ccb39.png"><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。单位是“比特每秒”，b/s，kb/s，Mb/s，Gb/s。<font color="Green">网络设备所支持的最高速率</font>。<h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2>表示在单位时间内通过某个网络（或信道、接口）的数据量。单位b/s，kb/s，Mb/s等。吞吐量受网络的带宽或网络的额定速率的限制。<h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2>指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫<font color="Green">延迟或迟延</font>。单位是s。排队时延类似安检排队，处理时延类似于安检。<br><img src="https://img-blog.csdnimg.cn/img_convert/f1708cc70f83330feb245cab1b48334b.png"><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2>时延带宽积=传播时延 X 带宽<br>时延带宽积又称为以比特为单位的链路长度。<br><img src="https://img-blog.csdnimg.cn/img_convert/19743672dcbc92aa25ad713e3b945aff.png"><h2 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h2>从<font color="Red">发送方发送数据开始，到发送方收到接收方的确认</font>（接收方收到数据后立即发送确认），总共经历的时延。<br>RTT = 往返传播时延（传播时延*<font color="Red">2</font>）+ 末端处理时延（基本忽略不计）<h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2>类似于路上车辆拥挤程度<br><img src="https://img-blog.csdnimg.cn/img_convert/47593c21b7cbe74028c99840bf5354b4.png"><h1 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h1></li></ul><h2 id="分层的基本原则"><a href="#分层的基本原则" class="headerlink" title="分层的基本原则"></a>分层的基本原则</h2><ol><li>各层之间相互独立，每层只实现一种相对独立的功能。</li><li>每层之间界面自然清晰，易于理解，相互交流尽可能少。</li><li>结构上可分割开。每层都采用最合适的技术来实现。</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务。</li><li>整个分层结构应该能促进标准化工作。<h2 id="分层结构中的概念"><a href="#分层结构中的概念" class="headerlink" title="分层结构中的概念"></a>分层结构中的概念</h2></li><li>实体:第n层中的活动元素称为n层实体。同一层的实体叫对等实体。</li><li>协议:为进行网络中的对等实体数据交换而建立的规则、标准或约定称为网络协议。【水平】</li></ol><ul><li>语法:规定传输数据的格式</li><li>语义:规定所要完成的功能</li><li>同步:规定各种操作的顺序</li></ul><ol start="3"><li>接口（访问服务点SAP) :上层使用下层服务的入口。</li><li>服务:下层为相邻上层提供的功能调用。【垂直】，上一层的PDU变成下一层的SDU。<br><img src="https://img-blog.csdnimg.cn/img_convert/abaa9be3ae3fe35e45a02b5392ef397d.png"><h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1></li></ol><h2 id="五层参考模型是为了方便学习而划分出来的，实际上并没有这个模型。"><a href="#五层参考模型是为了方便学习而划分出来的，实际上并没有这个模型。" class="headerlink" title="五层参考模型是为了方便学习而划分出来的，实际上并没有这个模型。"></a>五层参考模型是为了方便学习而划分出来的，实际上并没有这个模型。</h2><p>  <img src="https://img-blog.csdnimg.cn/img_convert/df7bf0d1e8aaa6820afc79fea797d63f.png"></p><h2 id="使用OSI模型时的通信过程"><a href="#使用OSI模型时的通信过程" class="headerlink" title="使用OSI模型时的通信过程"></a>使用OSI模型时的通信过程</h2><p>  <img src="https://img-blog.csdnimg.cn/img_convert/9e34ca222065e37bcffdaaafbcbc5b12.png"></p><h2 id="OSI模型各层的功能"><a href="#OSI模型各层的功能" class="headerlink" title="OSI模型各层的功能"></a>OSI模型各层的功能</h2><ol><li>应用层：所有能和用户交互产生网络流量的程序。如QQ，浏览器等。    - 典型服务：FTP传文件、SMTP发邮件、HTTP万维网。</li><li>表示层：用于处理在两个通信系统中交换信息的表示方式（语法和语义）。<br>功能：</li></ol><ul><li>数据格式变换（翻译官）</li><li>数据加密解密</li><li>数据压缩和恢复</li></ul><ol start="3"><li>会话层：向表示层实体/用户进程提供建立连接并在连接上有序地传输数据。这是会话，也是建立同步(SYN)。<br>功能：</li></ol><ul><li>建立、管理、终止会话</li><li>使用校验点可使会话在通信失效时从校验点/同步点继续恢复通信，实现数据同步。适用于传输大文件。</li></ul><ol start="4"><li>传输层：负责主机中两个进程的通信，即端到端的通信。传输单位是报文段或用户数据报。<br>功能：</li></ol><ul><li>可靠传输，不可靠传输（一般用于小文件）</li><li>差错控制（用来处理传输过程中出现的错误）</li><li>流量控制（当两台主机处理数据的速度不匹配时，会对速度过快的主机进行控制）</li><li>复用分用<ul><li>复用:多个应用层进程可同时使用下面运输层的服务。</li><li>分用:运输层把收到的信息分别交付给上面应用层中相应的进程。</li></ul></li></ul><ol start="5"><li>网络层：主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。把数据报进行切割后，就是分组.<br>功能：</li></ol><ul><li>路由选择（选择最合适的路由来传递数据）</li><li>流量控制</li><li>差错控制</li><li>拥塞控制（若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定撒施，缓解这种拥塞。）</li></ul><ol start="6"><li>数据链路层：<br>主要任务是把网络层传下来的数据报组装成帧。数据链路层/链路层的传输单位是帧。<br>功能：</li></ol><ul><li>成帧（定义帧的开始和结束）</li><li>差错控制</li><li>流量控制访问（接入）控制（控制对信道的访问）</li></ul><ol start="7"><li>物理层：主要任务是在物理媒体上实现比特流的透明传输。<br>物理层传输单位是比特。<br>透明传输:指不管所传数据是什么样的比特组合,都应当能够在链路上传送。<br>功能：</li></ol><ul><li>定义接口特性</li><li>定义传输模式<ul><li>单工 接受方和发送方已经确定，不能更改</li><li>半双工 介于两者之间。同一时间段内，只能有一个接受方或发送方，但是身份可以调换。</li><li>双工 可以同时当做接收方和发送方，类似于打电话</li></ul></li><li>定义传输速率</li><li>比特同步</li><li>比特编码<h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/806ea378f67666b1303817d09652af6d.png">   </p><h2 id="OSI参考模型与TCP-IP参考模型相同点"><a href="#OSI参考模型与TCP-IP参考模型相同点" class="headerlink" title="OSI参考模型与TCP/IP参考模型相同点"></a>OSI参考模型与TCP/IP参考模型相同点</h2><ol><li>都分层</li><li>基于独立的协议栈的概念；</li><li>可以实现异构网络互联<h2 id="OSI参考模型与TCP-IP参考模型不同点"><a href="#OSI参考模型与TCP-IP参考模型不同点" class="headerlink" title="OSI参考模型与TCP/IP参考模型不同点"></a>OSI参考模型与TCP/IP参考模型不同点</h2><img src="https://img-blog.csdnimg.cn/4e2033e47d5148d2af88120c4c0e0a8b.png"></li></ol><ul><li>面向连接分为三个阶段，第一是<font color="Red">建立连接</font>，在此阶段，发出一个建立连接的请求。只有在<font color="Green">连接成功建立之后</font>，才能开始<font color="Red">数据传输</font>，这是第二阶段。接着，当数据传输完毕，必须<font color="Red">释放连接</font>。而面向无连接没有这么多阶段，它<font color="Red">直接</font>进行数据传输。 <h2 id="5层参考模型（实际不存在）"><a href="#5层参考模型（实际不存在）" class="headerlink" title="5层参考模型（实际不存在）"></a>5层参考模型（实际不存在）</h2></li><li>模型图<br><img src="https://img-blog.csdnimg.cn/68dce9c0f63a4e78887170d386b8a95f.png"></li><li>5层参考模型的数据封装与解封装<br><img src="https://img-blog.csdnimg.cn/28daf4adc9014eeda713e0ea43c62458.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高动力和专注力</title>
      <link href="/posts/b2abe695.html"/>
      <url>/posts/b2abe695.html</url>
      
        <content type="html"><![CDATA[<ul><li>With the new year coming up,let me share with you three and half simple things that would make good resulutions by themselves,or easier to complete you other your new’s resulutions as well.<br><img src="https://pic.quanjing.com/9r/c1/QJ6959865524.jpg@!350h" alt="图片alt"></li></ul><ol><li>Go to sleep as close to 10PM as you can,Improving quality of sleep overall is incredible helpful for mood, focus, energy levels and health in general,but if I had to pick one thing that improve my sleep the most,it would have to be this,have you ever slept a perfectly resonable amount 7 to 9 hours and woke up feeling groggy and tierd? This thanks to the circadian rhythms,your body runs a biological cloclk that dicates many physiological processes,we have a daily dose of cortisol in the morning to wake us up and a rise melatonin at night to put us to sleep,if you can act in sync with this rhythm,falling aslep and getting higher quality sleep is much easier,what our body would perfer us to do,is to fall aslep just a few hours after the sun goes down,this differs depending on where in the world you are,but for most people it’s around 10PM,the poweful anticarcinogen and antioxidant melatonion as well as the restoralive ‘you one’,Human Growth Hormone are secreted in their strongest between 10PM and 2AM. As neurologist Kulreet Chaudhary says:”If you body is chronically deprive of the regenerative sleep between 10PM and 2AM, then you may still feel fatigued when you wake up in the morining.” I’ve found going sleep around 10PM is always better. For example if I got six hour sleep from 10PM to 4AM, I will feel much better than if I got eight hours sleep from 1AM to 9AM.<br><img src="https://pic.52112.com/180316/0316_51/5NaRe59C6f_small.jpg"></li><li>Limit your usage of novelty at a click websites, Internet addiction is a real pheonomenon and more and more studies on this topic are coming out. But you don’t have to be technically addicted to see detriments. Dopamine is the nerotransmitter responsible for making you want to do things and the reason drugs can be so addictive. Drugs cause a huge surge in dopamine,and when someone becomes overexposed to dopamaine,the dopamine receptors down regular,meaning more and more dopamine is necessary to get the same amount of motivation. Esentially,the dopamine receptors become desensitizde. And it doesn’t have to be surges of dopamine to get you addicted,it can be frequent exposion,for example the addiction to cigaretts is surprisingly higher than heroin,the different between the two is you can take puff of a cigarette and get dopamine rise dozens of times a day, But you’d be passed out or dead before you get anywhere near the frequency with heroin. The thing with Internet is that websites like reddit, imgur, facebook, twitter act like that puff of a cigarette. Swipe for a new picture and you get a bit of dopamine,scroll down and you get a bit of dopamine,click on a link you get a bit of dopamine,but you can do this hundreds of times throughout the day,this will desensitize your dopamine receptors and it will be harder and harder to get motivation by activities that aren’t instantly gratifying. The gap between behavior and reward with the internet is incredibly samll,it can be half a second,behavior:move thumb,reward:picture. By using the internet too often,it’s harder and harder to tolerate more time between behavior and reward. Imgur can reward you with funny picture in a couple seconds,but staying focus on a project can take several weeks before you’re reward with a sense of fulfillment.<br><img src="https://pic3.zhimg.com/v2-4556c2fc827ebf96df59a34d22fac3cd_1200x500.jpg"></li><li>Meditate,it’s a great way to deprogram this anxious,instant gratification orientend brain. Meditation has a very long list of health benefits,many of which have been scientifically documented. There’s far too many to talk about here,but the one huge benefit is that it quiets that constantly talking usually negative inner narrator. The inner narrator is the one saying:”I gotta do this, I gotta do that, What should I eat for lunch, How come so and so hasn’t texted me back?,and so on.” There’s actually a network in the brain called the default mode network that is generating this mind chatter,it’s responsible for thinking about youself,thinking about how other people are thinking about you and ruminating about the past and worrying about the future. Meditation has been shown to reduce activity in this network. By reducing activity in the default mode network,meditation can help difuse anxious,impatient,unfocused and instant gratification orientend mind that the internet helpde creat.<br><img src="https://syimg.3dmgame.com/uploadimg/upload/image/20201109/20201109145644_24071.jpg"></li><li>Do some exercise everyday, I used look at exercise as mainly just a way to build muscle or lose fat. But now,even if exercise didn’t change my body looled at all, I would do it every day. The positive effects on how it makes your body look pale in comprasion to the impress mental and physiological benefits exercise provides. Exercise has been shown to help people learn much more efficiently,better deal with stress and drestically reduce anxiety. One big thing exercise does is it raises your level of brain derived neurotrophic factor-BNDF,it directly promotes the growth of new brain cells. Exercise will also give you more motivation in general,exercise actually triggers the creations of new dopamine receptors meaning you will become more sensitive to dopamine,making it easier to be motivated.</li></ol><ul><li>Going to sleep earlier,Meditation and Exercise, pretty simple and straightforward things,but deviously hard to turn into habit. Though,once this 3 things do become habits,they will generate far more motivation and power than they require.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown拓展学习</title>
      <link href="/posts/5f4d260d.html"/>
      <url>/posts/5f4d260d.html</url>
      
        <content type="html"><![CDATA[<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。<br>例子：<br>代码：</p><blockquote><p><code>| Syntax      | Description |</code><br><code>| ------ | ----------- |</code><br><code>| Header      | Title       |</code><br><code>| Paragraph   | Text        |</code></p></blockquote><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p>Tip: 使用连字符和管道创建表可能很麻烦。为了加快该过程，请尝试使用Markdown Tables Generator。使用图形界面构建表，然后将生成的Markdown格式的文本复制到文件中。</p><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。<br>您可以在表格中设置文本格式。例如，您可以添加链接，代码（仅反引号（`）中的单词或短语，而不是代码块）和强调。<br>您不能添加标题，块引用，列表，水平规则，图像或HTML标签。</p><h2 id="转移字符"><a href="#转移字符" class="headerlink" title="转移字符"></a>转移字符</h2><p>您可以使用表格的HTML字符代码（&amp;#124;）在表中显示竖线（|）字符。</p><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号（(```）或三个波浪号（~~~）。</p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。</p><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。<br>要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]: My footnote.）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。<br>例子：末尾脚注[^1]，文章内脚注[^2]<br>[^2]:内脚注</p><h1 id="标题编号"><a href="#标题编号" class="headerlink" title="标题编号"></a>标题编号</h1><p>许多Markdown处理器支持标题的自定义ID - 一些Markdown处理器会自动添加它们。添加自定义ID允许您直接链接到标题并使用CSS对其进行修改。要添加自定义标题ID，请在与标题相同的行上用大括号括起该自定义ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### My Great Heading &#123;#custom-id&#125;</span><br></pre></td></tr></table></figure><h2 id="链接到标题ID-headid"><a href="#链接到标题ID-headid" class="headerlink" title="链接到标题ID (#headid)"></a>链接到标题ID (#headid)</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Heading IDs</span>](<span class="link">#heading-ids</span>)</span><br></pre></td></tr></table></figure><p>例子：<a href="#biaoge">链接到表格</a></p><h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><p>一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来像这样。此功能使您可以指示某些单词是一个错误，要从文档中删除。若要删除单词，请在单词前后使用两个波浪号<del>。<br>例子；</del>删除线例子~~</p><h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。<br>例子: </p><ul><li><input disabled type="checkbox"> 选择框实例<h1 id="使用emoji表情"><a href="#使用emoji表情" class="headerlink" title="使用emoji表情"></a>使用emoji表情</h1></li></ul><p>有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入emoji shortcodes。</p><h1 id="自动网站链接"><a href="#自动网站链接" class="headerlink" title="自动网站链接"></a>自动网站链接</h1><p>许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入<a href="http://www.example.com,即使您未使用方括号,您的markdown处理器也会自动将其转换为链接./">http://www.example.com，即使您未使用方括号，您的Markdown处理器也会自动将其转换为链接。</a></p><h2 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h2><p>如果您不希望自动链接URL，则可以通过将URL表示为带反引号的代码来删除该链接。<br>[^1]:末尾脚注</p><h1 id="分栏tab的实现"><a href="#分栏tab的实现" class="headerlink" title="分栏tab的实现"></a>分栏tab的实现</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><ol><li>Unique name<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>index<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>tap caption<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>@icon<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><div class="tabs" id="example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#example-1">tab1</button></li><li class="tab"><button type="button" data-href="#example-2">tab2</button></li><li class="tab"><button type="button" data-href="#example-3">tab3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="example-1"><p>  <em><strong>content1</strong></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="example-2"><p>  <em><strong>content2</strong></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="example-3"><p>  <em><strong>content3</strong></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="/posts/82d7ef45.html"/>
      <url>/posts/82d7ef45.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown的优点"><a href="#Markdown的优点" class="headerlink" title="Markdown的优点"></a>Markdown的优点</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p><h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。#的数量代表了标题的级别。</p><h2 id="可选语法"><a href="#可选语法" class="headerlink" title="可选语法"></a>可选语法</h2><p>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 – 号来标识二级标题。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，请用一个空格在 # 和标题之间进行分隔。</p><h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>要创建段落，请使用空白行将一行或多行文本进行分隔。</p><h2 id="段落用法的最佳实践"><a href="#段落用法的最佳实践" class="headerlink" title="段落用法的最佳实践"></a>段落用法的最佳实践</h2><p>不要用空格（spaces）或制表符（ tabs）缩进段落。</p><h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。</p><h2 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>加空格或者添加HTML的换行符。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><h2 id="粗体（Bold）"><a href="#粗体（Bold）" class="headerlink" title="粗体（Bold）"></a>粗体（Bold）</h2><p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。</p><h2 id="最佳实践-2"><a href="#最佳实践-2" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。<br>例子：<strong>加粗</strong></p><h2 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a>斜体（Italic）</h2><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><h2 id="最佳实践-3"><a href="#最佳实践-3" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。<br>例子: <em>斜体</em> <em><strong>加粗斜体</strong></em></p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>建议统一使用星号</p><h1 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h1><h2 id="单个引用块"><a href="#单个引用块" class="headerlink" title="单个引用块"></a>单个引用块</h2><p>要创建块引用，请在段落前添加一个 &gt; 符号<br>例子：</p><blockquote><p>单个引用块</p></blockquote><h2 id="多个引用块"><a href="#多个引用块" class="headerlink" title="多个引用块"></a>多个引用块</h2><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。<br>例子：</p><blockquote><p>单个引用块</p><p>多个引用块</p></blockquote><h2 id="嵌套快"><a href="#嵌套快" class="headerlink" title="嵌套快"></a>嵌套快</h2><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。<br>例子：</p><blockquote><p>引用块</p><blockquote><p>子引用块</p></blockquote></blockquote><h2 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>可以将多个条目组织成有序或无序列表</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。嵌套列表使用tap键实现。<br>例子：</p><ol><li>一</li><li>二<ol><li>小一<h2 id="最佳实践-4"><a href="#最佳实践-4" class="headerlink" title="最佳实践"></a>最佳实践</h2></li></ol></li></ol><p>使用小数点.</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。<br>例子：</p><ul><li>一</li><li>二<ul><li>小一<h2 id="最佳实践-5"><a href="#最佳实践-5" class="headerlink" title="最佳实践"></a>最佳实践</h2></li></ul></li></ul><p>使用破折号-</p><h2 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h2><ol><li>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符。</li><li>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。<ul><li>你可以将一个无序表嵌入一个有序表。<h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1></li></ul></li></ol><p>要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</p><h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。要创建不用缩进的代码块，请使用 围栏式代码块（fenced code blocks）.<br>例子：</p><pre><code>&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><h1 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h1><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。为了兼容性，请在分隔线的前后均添加空白行。<br>例子：<br>1</p><hr><p>2</p><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><h2 id="给链接增加-Title"><a href="#给链接增加-Title" class="headerlink" title="给链接增加 Title"></a>给链接增加 Title</h2><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br>例子：</p><blockquote><p><code>这是一个链接 [Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</code></p></blockquote><h2 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h2><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。<br>例子：</p><blockquote><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#102;&#97;&#107;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#102;&#97;&#107;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;</a></p></blockquote><h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>强调 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。</p><blockquote><p><code>I love supporting the **[EFF](https://eff.org)**. This is the *[Markdown Guide](https://www.markdownguide.org)*. See the section on [</code>code<code>](#code).</code></p></blockquote><h2 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="*引用类型链接"></a>*引用类型链接</h2><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。<br>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)。</code></p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ </p><h1 id="内嵌-HTML-标签"><a href="#内嵌-HTML-标签" class="headerlink" title="内嵌 HTML 标签"></a>内嵌 HTML 标签</h1><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><h2 id="用法实践"><a href="#用法实践" class="headerlink" title="用法实践"></a>用法实践</h2><p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>个人常用网站</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/x1.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }/* 导航栏居中 *//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 个人卡片渐变 *//* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 页面样式调节 */:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 修复双栏显示bug *//* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}]]></content>
      
    </entry>
    
    
  
</search>
